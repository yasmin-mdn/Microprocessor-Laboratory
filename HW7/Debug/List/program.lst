
AVRASM ver. 2.1.30  D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm Sat Apr 16 09:22:58 2022

D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temp=R4
                 	.DEF _temp_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0041 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 4554
00002b 504d
00002c 5245
00002d 5441      	.DB  0x54,0x45,0x4D,0x50,0x45,0x52,0x41,0x54
00002e 5255
00002f 0045      	.DB  0x55,0x52,0x45,0x0
                 _0x2000060:
D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm(1127): warning: .cseg .db misalignment - padding zero byte
000030 0001      	.DB  0x1
                 _0x2000000:
000031 4e2d
000032 4e41
000033 4900
000034 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\E\uni\term8\AZ-Microp\HWs\HW7\Debug\List\program.asm(1130): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x0
                 _0x2020003:
000036 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000037 000c      	.DW  0x0C
000038 0260      	.DW  _0x6
000039 0054      	.DW  _0x0*2
                 
00003a 0001      	.DW  0x01
00003b 0271      	.DW  __seed_G100
00003c 0060      	.DW  _0x2000060*2
                 
00003d 0002      	.DW  0x02
00003e 0275      	.DW  __base_y_G101
00003f 006c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c 940c 007d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ;   Yasmin Madani
                 ;   97532265
                 ;*/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;#define ADC_VREF_TYPE 0x40
                 ;
                 ;int temp;
                 ;char show_arr[5];
                 ;
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0000 0012 unsigned int read_adc(unsigned char adc_input) {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0013     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00006e 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00006f 81e8      	LD   R30,Y
000070 64e0      	ORI  R30,0x40
000071 b9e7      	OUT  0x7,R30
                 ; 0000 0014 
                 ; 0000 0015     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0016     delay_us(10);
                +
000072 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000073 958a     +DEC R24
000074 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0017 
                 ; 0000 0018     ADCSRA|=0x40;
000075 9a36      	SBI  0x6,6
                 ; 0000 0019     while ((ADCSRA & 0x10)==0);
                 _0x3:
000076 9b34      	SBIS 0x6,4
000077 cffe      	RJMP _0x3
                 ; 0000 001A     ADCSRA|=0x10;
000078 9a34      	SBI  0x6,4
                 ; 0000 001B     return ADCW;
000079 b1e4      	IN   R30,0x4
00007a b1f5      	IN   R31,0x4+1
00007b 940c 0238 	JMP  _0x20A0002
                 ; 0000 001C }
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 001E void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 001F     // Declare your local variables here
                 ; 0000 0020 
                 ; 0000 0021     // Input/Output Ports initialization
                 ; 0000 0022     // Port A initialization
                 ; 0000 0023     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0024     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0025     PORTA=0x00;
00007d e0e0      	LDI  R30,LOW(0)
00007e bbeb      	OUT  0x1B,R30
                 ; 0000 0026     DDRA=0x00;
00007f bbea      	OUT  0x1A,R30
                 ; 0000 0027 
                 ; 0000 0028     // Port B initialization
                 ; 0000 0029     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 002A     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 002B     PORTB=0x00;
000080 bbe8      	OUT  0x18,R30
                 ; 0000 002C     DDRB=0x00;
000081 bbe7      	OUT  0x17,R30
                 ; 0000 002D 
                 ; 0000 002E     // Port C initialization
                 ; 0000 002F     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0030     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0031     PORTC=0xFF;
000082 efef      	LDI  R30,LOW(255)
000083 bbe5      	OUT  0x15,R30
                 ; 0000 0032     DDRC=0x00;
000084 e0e0      	LDI  R30,LOW(0)
000085 bbe4      	OUT  0x14,R30
                 ; 0000 0033 
                 ; 0000 0034     // Port D initialization
                 ; 0000 0035     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0036     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0037     PORTD=0x00;
000086 bbe2      	OUT  0x12,R30
                 ; 0000 0038     DDRD=0x00;
000087 bbe1      	OUT  0x11,R30
                 ; 0000 0039 
                 ; 0000 003A     // Timer/Counter 0 initialization
                 ; 0000 003B     // Clock source: System Clock
                 ; 0000 003C     // Clock value: Timer 0 Stopped
                 ; 0000 003D     // Mode: Normal top=0xFF
                 ; 0000 003E     // OC0 output: Disconnected
                 ; 0000 003F     TCCR0=0x00;
000088 bfe3      	OUT  0x33,R30
                 ; 0000 0040     TCNT0=0x00;
000089 bfe2      	OUT  0x32,R30
                 ; 0000 0041     OCR0=0x00;
00008a bfec      	OUT  0x3C,R30
                 ; 0000 0042 
                 ; 0000 0043     // Timer/Counter 1 initialization
                 ; 0000 0044     // Clock source: System Clock
                 ; 0000 0045     // Clock value: Timer1 Stopped
                 ; 0000 0046     // Mode: Normal top=0xFFFF
                 ; 0000 0047     // OC1A output: Discon.
                 ; 0000 0048     // OC1B output: Discon.
                 ; 0000 0049     // Noise Canceler: Off
                 ; 0000 004A     // Input Capture on Falling Edge
                 ; 0000 004B     // Timer1 Overflow Interrupt: Off
                 ; 0000 004C     // Input Capture Interrupt: Off
                 ; 0000 004D     // Compare A Match Interrupt: Off
                 ; 0000 004E     // Compare B Match Interrupt: Off
                 ; 0000 004F     TCCR1A=0x00;
00008b bdef      	OUT  0x2F,R30
                 ; 0000 0050     TCCR1B=0x00;
00008c bdee      	OUT  0x2E,R30
                 ; 0000 0051     TCNT1H=0x00;
00008d bded      	OUT  0x2D,R30
                 ; 0000 0052     TCNT1L=0x00;
00008e bdec      	OUT  0x2C,R30
                 ; 0000 0053     ICR1H=0x00;
00008f bde7      	OUT  0x27,R30
                 ; 0000 0054     ICR1L=0x00;
000090 bde6      	OUT  0x26,R30
                 ; 0000 0055     OCR1AH=0x00;
000091 bdeb      	OUT  0x2B,R30
                 ; 0000 0056     OCR1AL=0x00;
000092 bdea      	OUT  0x2A,R30
                 ; 0000 0057     OCR1BH=0x00;
000093 bde9      	OUT  0x29,R30
                 ; 0000 0058     OCR1BL=0x00;
000094 bde8      	OUT  0x28,R30
                 ; 0000 0059 
                 ; 0000 005A     // Timer/Counter 2 initialization
                 ; 0000 005B     // Clock source: System Clock
                 ; 0000 005C     // Clock value: Timer2 Stopped
                 ; 0000 005D     // Mode: Normal top=0xFF
                 ; 0000 005E     // OC2 output: Disconnected
                 ; 0000 005F     ASSR=0x00;
000095 bde2      	OUT  0x22,R30
                 ; 0000 0060     TCCR2=0x00;
000096 bde5      	OUT  0x25,R30
                 ; 0000 0061     TCNT2=0x00;
000097 bde4      	OUT  0x24,R30
                 ; 0000 0062     OCR2=0x00;
000098 bde3      	OUT  0x23,R30
                 ; 0000 0063 
                 ; 0000 0064     // External Interrupt(s) initialization
                 ; 0000 0065     // INT0: Off
                 ; 0000 0066     // INT1: Off
                 ; 0000 0067     // INT2: Off
                 ; 0000 0068     MCUCR=0x00;
000099 bfe5      	OUT  0x35,R30
                 ; 0000 0069     MCUCSR=0x00;
00009a bfe4      	OUT  0x34,R30
                 ; 0000 006A 
                 ; 0000 006B     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 006C     TIMSK=0x00;
00009b bfe9      	OUT  0x39,R30
                 ; 0000 006D 
                 ; 0000 006E     // USART initialization
                 ; 0000 006F     // USART disabled
                 ; 0000 0070     UCSRB=0x00;
00009c b9ea      	OUT  0xA,R30
                 ; 0000 0071 
                 ; 0000 0072     // Analog Comparator initialization
                 ; 0000 0073     // Analog Comparator: Off
                 ; 0000 0074     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0075     ACSR=0x80;
00009d e8e0      	LDI  R30,LOW(128)
00009e b9e8      	OUT  0x8,R30
                 ; 0000 0076     SFIOR=0x00;
00009f e0e0      	LDI  R30,LOW(0)
0000a0 bfe0      	OUT  0x30,R30
                 ; 0000 0077 
                 ; 0000 0078     // ADC initialization
                 ; 0000 0079     // ADC Clock frequency: 250.000 kHz
                 ; 0000 007A     // ADC Voltage Reference: AVCC pin
                 ; 0000 007B     ADMUX=ADC_VREF_TYPE & 0xff;
0000a1 e4e0      	LDI  R30,LOW(64)
0000a2 b9e7      	OUT  0x7,R30
                 ; 0000 007C     ADCSRA=0x85;
0000a3 e8e5      	LDI  R30,LOW(133)
0000a4 b9e6      	OUT  0x6,R30
                 ; 0000 007D 
                 ; 0000 007E     // SPI initialization
                 ; 0000 007F     // SPI disabled
                 ; 0000 0080     SPCR=0x00;
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 b9ed      	OUT  0xD,R30
                 ; 0000 0081 
                 ; 0000 0082     // TWI initialization
                 ; 0000 0083     // TWI disabled
                 ; 0000 0084     TWCR=0x00;
0000a7 bfe6      	OUT  0x36,R30
                 ; 0000 0085 
                 ; 0000 0086     // Alphanumeric LCD initialization
                 ; 0000 0087     // Connections are specified in the
                 ; 0000 0088     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0089     // RS - PORTC Bit 0
                 ; 0000 008A     // RD - PORTC Bit 1
                 ; 0000 008B     // EN - PORTC Bit 2
                 ; 0000 008C     // D4 - PORTC Bit 4
                 ; 0000 008D     // D5 - PORTC Bit 5
                 ; 0000 008E     // D6 - PORTC Bit 6
                 ; 0000 008F     // D7 - PORTC Bit 7
                 ; 0000 0090     // Characters/line: 16
                 ; 0000 0091     lcd_init(16);
0000a8 e1a0      	LDI  R26,LOW(16)
0000a9 940e 020c 	CALL _lcd_init
                 ; 0000 0092     lcd_clear();
0000ab 940e 01da 	CALL _lcd_clear
                 ; 0000 0093     lcd_gotoxy(2,0);
0000ad e0e2      	LDI  R30,LOW(2)
0000ae 93ea      	ST   -Y,R30
0000af e0a0      	LDI  R26,LOW(0)
0000b0 940e 01cd 	CALL _lcd_gotoxy
                 ; 0000 0094     lcd_puts("TEMPERATURE");
                +
0000b2 e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000b3 e0b2     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000b4 940e 01fb 	CALL _lcd_puts
                 ; 0000 0095 
                 ; 0000 0096     while(1) {
                 _0x7:
                 ; 0000 0097          temp = read_adc(0);
0000b6 e0a0      	LDI  R26,LOW(0)
0000b7 dfb6      	RCALL _read_adc
0000b8 012f      	MOVW R4,R30
                 ; 0000 0098          temp = (temp * 4.8898) ;
0000b9 940e 028f 	CALL SUBOPT_0x0
                +
0000bb e3ae     +LDI R26 , LOW ( 0x409C793E )
0000bc e7b9     +LDI R27 , HIGH ( 0x409C793E )
0000bd e98c     +LDI R24 , BYTE3 ( 0x409C793E )
0000be e490     +LDI R25 , BYTE4 ( 0x409C793E )
                 	__GETD2N 0x409C793E
0000bf 940e 03de 	CALL __MULF12
0000c1 940e 031d 	CALL __CFD1
0000c3 012f      	MOVW R4,R30
                 ; 0000 0099          temp = temp/10  ;
0000c4 01d2      	MOVW R26,R4
0000c5 e0ea      	LDI  R30,LOW(10)
0000c6 e0f0      	LDI  R31,HIGH(10)
0000c7 940e 04b5 	CALL __DIVW21
0000c9 012f      	MOVW R4,R30
                 ; 0000 009A          lcd_gotoxy(5,1);
0000ca e0e5      	LDI  R30,LOW(5)
0000cb 93ea      	ST   -Y,R30
0000cc e0a1      	LDI  R26,LOW(1)
0000cd 940e 01cd 	CALL _lcd_gotoxy
                 ; 0000 009B          ftoa(temp,2,show_arr);
0000cf 01f2      	MOVW R30,R4
0000d0 940e 028f 	CALL SUBOPT_0x0
0000d2 940e 04d7 	CALL __PUTPARD1
0000d4 e0e2      	LDI  R30,LOW(2)
0000d5 93ea      	ST   -Y,R30
0000d6 e6ac      	LDI  R26,LOW(_show_arr)
0000d7 e0b2      	LDI  R27,HIGH(_show_arr)
0000d8 940e 00e4 	CALL _ftoa
                 ; 0000 009C          lcd_puts(show_arr);
0000da e6ac      	LDI  R26,LOW(_show_arr)
0000db e0b2      	LDI  R27,HIGH(_show_arr)
0000dc 940e 01fb 	CALL _lcd_puts
                 ; 0000 009D          delay_ms(1000);
0000de eea8      	LDI  R26,LOW(1000)
0000df e0b3      	LDI  R27,HIGH(1000)
0000e0 940e 02de 	CALL _delay_ms
                 ; 0000 009E     }
0000e2 cfd3      	RJMP _0x7
                 ; 0000 009F }
                 _0xA:
0000e3 cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000260           	.BYTE 0xC
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
0000e4 93ba      	ST   -Y,R27
0000e5 93aa      	ST   -Y,R26
0000e6 9724      	SBIW R28,4
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 83e8      	ST   Y,R30
0000e9 83e9      	STD  Y+1,R30
0000ea 83ea      	STD  Y+2,R30
0000eb e3ef      	LDI  R30,LOW(63)
0000ec 83eb      	STD  Y+3,R30
0000ed 931a      	ST   -Y,R17
0000ee 930a      	ST   -Y,R16
0000ef 85eb      	LDD  R30,Y+11
0000f0 85fc      	LDD  R31,Y+11+1
0000f1 3fef      	CPI  R30,LOW(0xFFFF)
0000f2 efaf      	LDI  R26,HIGH(0xFFFF)
0000f3 07fa      	CPC  R31,R26
0000f4 f439      	BRNE _0x200000D
0000f5 940e 0294 	CALL SUBOPT_0x1
                +
0000f7 e6a2     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
0000f8 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
0000f9 940e 0282 	CALL _strcpyf
0000fb c0ad      	RJMP _0x20A0004
                 _0x200000D:
0000fc 3fef      	CPI  R30,LOW(0x7FFF)
0000fd e7af      	LDI  R26,HIGH(0x7FFF)
0000fe 07fa      	CPC  R31,R26
0000ff f439      	BRNE _0x200000C
000100 940e 0294 	CALL SUBOPT_0x1
                +
000102 e6a3     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
000103 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
000104 940e 0282 	CALL _strcpyf
000106 c0a2      	RJMP _0x20A0004
                 _0x200000C:
000107 85ac      	LDD  R26,Y+12
000108 23aa      	TST  R26
000109 f462      	BRPL _0x200000F
                +
00010a 85e9     +LDD R30 , Y + 9
00010b 85fa     +LDD R31 , Y + 9 + 1
00010c 856b     +LDD R22 , Y + 9 + 2
00010d 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00010e 940e 02e8 	CALL __ANEGF1
000110 940e 0299 	CALL SUBOPT_0x2
000112 940e 029e 	CALL SUBOPT_0x3
000114 e2ed      	LDI  R30,LOW(45)
000115 93ec      	ST   X,R30
                 _0x200000F:
000116 85a8      	LDD  R26,Y+8
000117 30a7      	CPI  R26,LOW(0x7)
000118 f010      	BRLO _0x2000010
000119 e0e6      	LDI  R30,LOW(6)
00011a 87e8      	STD  Y+8,R30
                 _0x2000010:
00011b 8518      	LDD  R17,Y+8
                 _0x2000011:
00011c 2fe1      	MOV  R30,R17
00011d 5011      	SUBI R17,1
00011e 30e0      	CPI  R30,0
00011f f039      	BREQ _0x2000013
000120 940e 02a5 	CALL SUBOPT_0x4
000122 940e 02aa 	CALL SUBOPT_0x5
000124 940e 02b1 	CALL SUBOPT_0x6
000126 cff5      	RJMP _0x2000011
                 _0x2000013:
000127 940e 02b6 	CALL SUBOPT_0x7
000129 940e 038e 	CALL __ADDF12
00012b 940e 0299 	CALL SUBOPT_0x2
00012d e010      	LDI  R17,LOW(0)
                +
00012e e0e0     +LDI R30 , LOW ( 0x3F800000 )
00012f e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000130 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000131 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000132 940e 02b1 	CALL SUBOPT_0x6
                 _0x2000014:
000134 940e 02b6 	CALL SUBOPT_0x7
000136 940e 0471 	CALL __CMPF12
000138 f088      	BRLO _0x2000016
000139 940e 02a5 	CALL SUBOPT_0x4
00013b 940e 02bf 	CALL SUBOPT_0x8
00013d 940e 02b1 	CALL SUBOPT_0x6
00013f 5f1f      	SUBI R17,-LOW(1)
000140 3217      	CPI  R17,39
000141 f038      	BRLO _0x2000017
000142 940e 0294 	CALL SUBOPT_0x1
                +
000144 e6a7     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
000145 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
000146 940e 0282 	CALL _strcpyf
000148 c060      	RJMP _0x20A0004
                 _0x2000017:
000149 cfea      	RJMP _0x2000014
                 _0x2000016:
00014a 3010      	CPI  R17,0
00014b f429      	BRNE _0x2000018
00014c 940e 029e 	CALL SUBOPT_0x3
00014e e3e0      	LDI  R30,LOW(48)
00014f 93ec      	ST   X,R30
000150 c02d      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
000151 2fe1      	MOV  R30,R17
000152 5011      	SUBI R17,1
000153 30e0      	CPI  R30,0
000154 f149      	BREQ _0x200001C
000155 940e 02a5 	CALL SUBOPT_0x4
000157 940e 02aa 	CALL SUBOPT_0x5
                +
000159 e0a0     +LDI R26 , LOW ( 0x3F000000 )
00015a e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00015b e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00015c e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00015d 940e 038e 	CALL __ADDF12
00015f 01df      	MOVW R26,R30
000160 01cb      	MOVW R24,R22
000161 940e 026b 	CALL _floor
000163 940e 02b1 	CALL SUBOPT_0x6
000165 940e 02b6 	CALL SUBOPT_0x7
000167 940e 042c 	CALL __DIVF21
000169 940e 031b 	CALL __CFD1U
00016b 2f0e      	MOV  R16,R30
00016c 940e 029e 	CALL SUBOPT_0x3
00016e 2fe0      	MOV  R30,R16
00016f 5de0      	SUBI R30,-LOW(48)
000170 93ec      	ST   X,R30
000171 2fe0      	MOV  R30,R16
000172 e0f0      	LDI  R31,0
000173 940e 02a5 	CALL SUBOPT_0x4
000175 940e 028f 	CALL SUBOPT_0x0
000177 940e 03de 	CALL __MULF12
000179 940e 02c6 	CALL SUBOPT_0x9
00017b 940e 02cb 	CALL SUBOPT_0xA
00017d cfd3      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
00017e 85e8      	LDD  R30,Y+8
00017f 30e0      	CPI  R30,0
000180 f121      	BREQ _0x20A0003
000181 940e 029e 	CALL SUBOPT_0x3
000183 e2ee      	LDI  R30,LOW(46)
000184 93ec      	ST   X,R30
                 _0x200001E:
000185 85e8      	LDD  R30,Y+8
000186 50e1      	SUBI R30,LOW(1)
000187 87e8      	STD  Y+8,R30
000188 5fef      	SUBI R30,-LOW(1)
000189 f0d9      	BREQ _0x2000020
00018a 940e 02c6 	CALL SUBOPT_0x9
00018c 940e 02bf 	CALL SUBOPT_0x8
00018e 940e 0299 	CALL SUBOPT_0x2
                +
000190 85e9     +LDD R30 , Y + 9
000191 85fa     +LDD R31 , Y + 9 + 1
000192 856b     +LDD R22 , Y + 9 + 2
000193 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000194 940e 031b 	CALL __CFD1U
000196 2f0e      	MOV  R16,R30
000197 940e 029e 	CALL SUBOPT_0x3
000199 2fe0      	MOV  R30,R16
00019a 5de0      	SUBI R30,-LOW(48)
00019b 93ec      	ST   X,R30
00019c 2fe0      	MOV  R30,R16
00019d e0f0      	LDI  R31,0
00019e 940e 02c6 	CALL SUBOPT_0x9
0001a0 940e 028f 	CALL SUBOPT_0x0
0001a2 940e 02cb 	CALL SUBOPT_0xA
0001a4 cfe0      	RJMP _0x200001E
                 _0x2000020:
                 _0x20A0003:
0001a5 81ae      	LDD  R26,Y+6
0001a6 81bf      	LDD  R27,Y+6+1
0001a7 e0e0      	LDI  R30,LOW(0)
0001a8 93ec      	ST   X,R30
                 _0x20A0004:
0001a9 8119      	LDD  R17,Y+1
0001aa 8108      	LDD  R16,Y+0
0001ab 962d      	ADIW R28,13
0001ac 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0001ad 93aa      	ST   -Y,R26
0001ae b3e5      	IN   R30,0x15
0001af 70ef      	ANDI R30,LOW(0xF)
0001b0 2fae      	MOV  R26,R30
0001b1 81e8      	LD   R30,Y
0001b2 7fe0      	ANDI R30,LOW(0xF0)
0001b3 2bea      	OR   R30,R26
0001b4 bbe5      	OUT  0x15,R30
                +
0001b5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001b6 958a     +DEC R24
0001b7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001b8 9aaa      	SBI  0x15,2
                +
0001b9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001ba 958a     +DEC R24
0001bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001bc 98aa      	CBI  0x15,2
                +
0001bd e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001be 958a     +DEC R24
0001bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001c0 c077      	RJMP _0x20A0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001c1 93aa      	ST   -Y,R26
0001c2 81a8      	LD   R26,Y
0001c3 dfe9      	RCALL __lcd_write_nibble_G101
0001c4 81e8          ld    r30,y
0001c5 95e2          swap  r30
0001c6 83e8          st    y,r30
0001c7 81a8      	LD   R26,Y
0001c8 dfe4      	RCALL __lcd_write_nibble_G101
                +
0001c9 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001ca 958a     +DEC R24
0001cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001cc c06b      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001cd 93aa      	ST   -Y,R26
0001ce 81e8      	LD   R30,Y
0001cf e0f0      	LDI  R31,0
0001d0 58eb      	SUBI R30,LOW(-__base_y_G101)
0001d1 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0001d2 81e0      	LD   R30,Z
0001d3 81a9      	LDD  R26,Y+1
0001d4 0fae      	ADD  R26,R30
0001d5 dfeb      	RCALL __lcd_write_data
0001d6 8079      	LDD  R7,Y+1
0001d7 8068      	LDD  R6,Y+0
0001d8 9622      	ADIW R28,2
0001d9 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001da e0a2      	LDI  R26,LOW(2)
0001db 940e 02d0 	CALL SUBOPT_0xB
0001dd e0ac      	LDI  R26,LOW(12)
0001de dfe2      	RCALL __lcd_write_data
0001df e0a1      	LDI  R26,LOW(1)
0001e0 940e 02d0 	CALL SUBOPT_0xB
0001e2 e0e0      	LDI  R30,LOW(0)
0001e3 2e6e      	MOV  R6,R30
0001e4 2e7e      	MOV  R7,R30
0001e5 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001e6 93aa      	ST   -Y,R26
0001e7 81a8      	LD   R26,Y
0001e8 30aa      	CPI  R26,LOW(0xA)
0001e9 f011      	BREQ _0x2020005
0001ea 1479      	CP   R7,R9
0001eb f048      	BRLO _0x2020004
                 _0x2020005:
0001ec e0e0      	LDI  R30,LOW(0)
0001ed 93ea      	ST   -Y,R30
0001ee 9463      	INC  R6
0001ef 2da6      	MOV  R26,R6
0001f0 dfdc      	RCALL _lcd_gotoxy
0001f1 81a8      	LD   R26,Y
0001f2 30aa      	CPI  R26,LOW(0xA)
0001f3 f409      	BRNE _0x2020007
0001f4 c043      	RJMP _0x20A0002
                 _0x2020007:
                 _0x2020004:
0001f5 9473      	INC  R7
0001f6 9aa8      	SBI  0x15,0
0001f7 81a8      	LD   R26,Y
0001f8 dfc8      	RCALL __lcd_write_data
0001f9 98a8      	CBI  0x15,0
0001fa c03d      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001fb 93ba      	ST   -Y,R27
0001fc 93aa      	ST   -Y,R26
0001fd 931a      	ST   -Y,R17
                 _0x2020008:
0001fe 81a9      	LDD  R26,Y+1
0001ff 81ba      	LDD  R27,Y+1+1
000200 91ed      	LD   R30,X+
000201 83a9      	STD  Y+1,R26
000202 83ba      	STD  Y+1+1,R27
000203 2f1e      	MOV  R17,R30
000204 30e0      	CPI  R30,0
000205 f019      	BREQ _0x202000A
000206 2fa1      	MOV  R26,R17
000207 dfde      	RCALL _lcd_putchar
000208 cff5      	RJMP _0x2020008
                 _0x202000A:
000209 8118      	LDD  R17,Y+0
00020a 9623      	ADIW R28,3
00020b 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00020c 93aa      	ST   -Y,R26
00020d b3e4      	IN   R30,0x14
00020e 6fe0      	ORI  R30,LOW(0xF0)
00020f bbe4      	OUT  0x14,R30
000210 9aa2      	SBI  0x14,2
000211 9aa0      	SBI  0x14,0
000212 9aa1      	SBI  0x14,1
000213 98aa      	CBI  0x15,2
000214 98a8      	CBI  0x15,0
000215 98a9      	CBI  0x15,1
000216 8098      	LDD  R9,Y+0
000217 81e8      	LD   R30,Y
000218 58e0      	SUBI R30,-LOW(128)
                +
000219 93e0 0277+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00021b 81e8      	LD   R30,Y
00021c 54e0      	SUBI R30,-LOW(192)
                +
00021d 93e0 0278+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00021f e1a4      	LDI  R26,LOW(20)
000220 e0b0      	LDI  R27,0
000221 940e 02de 	CALL _delay_ms
000223 940e 02d6 	CALL SUBOPT_0xC
000225 940e 02d6 	CALL SUBOPT_0xC
000227 940e 02d6 	CALL SUBOPT_0xC
000229 e2a0      	LDI  R26,LOW(32)
00022a df82      	RCALL __lcd_write_nibble_G101
                +
00022b ec88     +LDI R24 , LOW ( 200 )
00022c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00022d 9701     +SBIW R24 , 1
00022e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00022f e2a8      	LDI  R26,LOW(40)
000230 df90      	RCALL __lcd_write_data
000231 e0a4      	LDI  R26,LOW(4)
000232 df8e      	RCALL __lcd_write_data
000233 e8a5      	LDI  R26,LOW(133)
000234 df8c      	RCALL __lcd_write_data
000235 e0a6      	LDI  R26,LOW(6)
000236 df8a      	RCALL __lcd_write_data
000237 dfa2      	RCALL _lcd_clear
                 _0x20A0002:
000238 9621      	ADIW R28,1
000239 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
00023a 940e 04dc 	CALL __PUTPARD2
00023c 817b         ldd  r23,y+3
00023d 816a         ldd  r22,y+2
00023e 81f9         ldd  r31,y+1
00023f 81e8         ld   r30,y
000240 fb77         bst  r23,7
000241 0f77         lsl  r23
000242 fd67         sbrc r22,7
000243 6071         sbr  r23,1
000244 2f97         mov  r25,r23
000245 579e         subi r25,0x7e
000246 f081         breq __ftrunc0
000247 f078         brcs __ftrunc0
000248 3198         cpi  r25,24
000249 f490         brsh __ftrunc1
00024a 27aa         clr  r26
00024b 27bb         clr  r27
00024c 2788         clr  r24
                 __ftrunc2:
00024d 9408         sec
00024e 9587         ror  r24
00024f 95b7         ror  r27
000250 95a7         ror  r26
000251 959a         dec  r25
000252 f7d1         brne __ftrunc2
000253 23ea         and  r30,r26
000254 23fb         and  r31,r27
000255 2368         and  r22,r24
000256 c005         rjmp __ftrunc1
                 __ftrunc0:
000257 94e8         clt
000258 2777         clr  r23
000259 27ee         clr  r30
00025a 27ff         clr  r31
00025b 2766         clr  r22
                 __ftrunc1:
00025c 776f         cbr  r22,0x80
00025d 9576         lsr  r23
00025e f408         brcc __ftrunc3
00025f 6860         sbr  r22,0x80
                 __ftrunc3:
000260 f977         bld  r23,7
000261 91a9         ld   r26,y+
000262 91b9         ld   r27,y+
000263 9189         ld   r24,y+
000264 9199         ld   r25,y+
000265 17ea         cp   r30,r26
000266 07fb         cpc  r31,r27
000267 0768         cpc  r22,r24
000268 0779         cpc  r23,r25
000269 fb97         bst  r25,7
00026a 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00026b 940e 04dc 	CALL __PUTPARD2
00026d 940e 04cd 	CALL __GETD2S0
00026f 940e 023a 	CALL _ftrunc
000271 940e 04d2 	CALL __PUTD1S0
000273 f419          brne __floor1
                 __floor0:
000274 940e 04c8 	CALL __GETD1S0
000276 c009      	RJMP _0x20A0001
                 __floor1:
000277 f7e6          brtc __floor0
000278 940e 04c8 	CALL __GETD1S0
                +
00027a e0a0     +LDI R26 , LOW ( 0x3F800000 )
00027b e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00027c e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00027d e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00027e 940e 0387 	CALL __SUBF12
                 _0x20A0001:
000280 9624      	ADIW R28,4
000281 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
000282 93ba      	ST   -Y,R27
000283 93aa      	ST   -Y,R26
000284 91e9          ld   r30,y+
000285 91f9          ld   r31,y+
000286 91a9          ld   r26,y+
000287 91b9          ld   r27,y+
000288 01cd          movw r24,r26
                 strcpyf0:
000289 9005      	lpm  r0,z+
00028a 920d          st   x+,r0
00028b 2000          tst  r0
00028c f7e1          brne strcpyf0
00028d 01fc          movw r30,r24
00028e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _show_arr:
00026c           	.BYTE 0x5
                 __seed_G100:
000271           	.BYTE 0x4
                 __base_y_G101:
000275           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00028f 940e 049d 	CALL __CWD1
000291 940e 0354 	CALL __CDF1
000293 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000294 81ee      	LDD  R30,Y+6
000295 81ff      	LDD  R31,Y+6+1
000296 93fa      	ST   -Y,R31
000297 93ea      	ST   -Y,R30
000298 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
                +
000299 87e9     +STD Y + 9 , R30
00029a 87fa     +STD Y + 9 + 1 , R31
00029b 876b     +STD Y + 9 + 2 , R22
00029c 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
00029d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00029e 81ae      	LDD  R26,Y+6
00029f 81bf      	LDD  R27,Y+6+1
0002a0 9611      	ADIW R26,1
0002a1 83ae      	STD  Y+6,R26
0002a2 83bf      	STD  Y+6+1,R27
0002a3 9711      	SBIW R26,1
0002a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
                +
0002a5 81aa     +LDD R26 , Y + 2
0002a6 81bb     +LDD R27 , Y + 2 + 1
0002a7 818c     +LDD R24 , Y + 2 + 2
0002a8 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0002a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
                +
0002aa eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0002ab ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0002ac ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0002ad e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0002ae 940e 03de 	CALL __MULF12
0002b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
                +
0002b1 83ea     +STD Y + 2 , R30
0002b2 83fb     +STD Y + 2 + 1 , R31
0002b3 836c     +STD Y + 2 + 2 , R22
0002b4 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0002b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
                +
0002b6 81ea     +LDD R30 , Y + 2
0002b7 81fb     +LDD R31 , Y + 2 + 1
0002b8 816c     +LDD R22 , Y + 2 + 2
0002b9 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0002ba 85a9     +LDD R26 , Y + 9
0002bb 85ba     +LDD R27 , Y + 9 + 1
0002bc 858b     +LDD R24 , Y + 9 + 2
0002bd 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0002be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
0002bf e0e0     +LDI R30 , LOW ( 0x41200000 )
0002c0 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0002c1 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0002c2 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0002c3 940e 03de 	CALL __MULF12
0002c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
                +
0002c6 85a9     +LDD R26 , Y + 9
0002c7 85ba     +LDD R27 , Y + 9 + 1
0002c8 858b     +LDD R24 , Y + 9 + 2
0002c9 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0002ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0002cb 940e 04e1 	CALL __SWAPD12
0002cd 940e 0387 	CALL __SUBF12
0002cf cfc9      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0002d0 940e 01c1 	CALL __lcd_write_data
0002d2 e0a3      	LDI  R26,LOW(3)
0002d3 e0b0      	LDI  R27,0
0002d4 940c 02de 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
0002d6 e3a0      	LDI  R26,LOW(48)
0002d7 940e 01ad 	CALL __lcd_write_nibble_G101
                +
0002d9 ec88     +LDI R24 , LOW ( 200 )
0002da e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002db 9701     +SBIW R24 , 1
0002dc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002dd 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002de 9610      	adiw r26,0
0002df f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002e0 ed80     +LDI R24 , LOW ( 0x7D0 )
0002e1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002e2 9701     +SBIW R24 , 1
0002e3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002e4 95a8      	wdr
0002e5 9711      	sbiw r26,1
0002e6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002e7 9508      	ret
                 
                 __ANEGF1:
0002e8 9730      	SBIW R30,0
0002e9 4060      	SBCI R22,0
0002ea 4070      	SBCI R23,0
0002eb f009      	BREQ __ANEGF10
0002ec 5870      	SUBI R23,0x80
                 __ANEGF10:
0002ed 9508      	RET
                 
                 __ROUND_REPACK:
0002ee 2355      	TST  R21
0002ef f442      	BRPL __REPACK
0002f0 3850      	CPI  R21,0x80
0002f1 f411      	BRNE __ROUND_REPACK0
0002f2 ffe0      	SBRS R30,0
0002f3 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002f4 9631      	ADIW R30,1
0002f5 1f69      	ADC  R22,R25
0002f6 1f79      	ADC  R23,R25
0002f7 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002f8 e850      	LDI  R21,0x80
0002f9 2757      	EOR  R21,R23
0002fa f411      	BRNE __REPACK0
0002fb 935f      	PUSH R21
0002fc c0cf      	RJMP __ZERORES
                 __REPACK0:
0002fd 3f5f      	CPI  R21,0xFF
0002fe f031      	BREQ __REPACK1
0002ff 0f66      	LSL  R22
000300 0c00      	LSL  R0
000301 9557      	ROR  R21
000302 9567      	ROR  R22
000303 2f75      	MOV  R23,R21
000304 9508      	RET
                 __REPACK1:
000305 935f      	PUSH R21
000306 2000      	TST  R0
000307 f00a      	BRMI __REPACK2
000308 c0cf      	RJMP __MAXRES
                 __REPACK2:
000309 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00030a e850      	LDI  R21,0x80
00030b 2e19      	MOV  R1,R25
00030c 2215      	AND  R1,R21
00030d 0f88      	LSL  R24
00030e 1f99      	ROL  R25
00030f 2795      	EOR  R25,R21
000310 0f55      	LSL  R21
000311 9587      	ROR  R24
                 
                 __UNPACK1:
000312 e850      	LDI  R21,0x80
000313 2e07      	MOV  R0,R23
000314 2205      	AND  R0,R21
000315 0f66      	LSL  R22
000316 1f77      	ROL  R23
000317 2775      	EOR  R23,R21
000318 0f55      	LSL  R21
000319 9567      	ROR  R22
00031a 9508      	RET
                 
                 __CFD1U:
00031b 9468      	SET
00031c c001      	RJMP __CFD1U0
                 __CFD1:
00031d 94e8      	CLT
                 __CFD1U0:
00031e 935f      	PUSH R21
00031f dff2      	RCALL __UNPACK1
000320 3870      	CPI  R23,0x80
000321 f018      	BRLO __CFD10
000322 3f7f      	CPI  R23,0xFF
000323 f408      	BRCC __CFD10
000324 c0a7      	RJMP __ZERORES
                 __CFD10:
000325 e156      	LDI  R21,22
000326 1b57      	SUB  R21,R23
000327 f4aa      	BRPL __CFD11
000328 9551      	NEG  R21
000329 3058      	CPI  R21,8
00032a f40e      	BRTC __CFD19
00032b 3059      	CPI  R21,9
                 __CFD19:
00032c f030      	BRLO __CFD17
00032d efef      	SER  R30
00032e efff      	SER  R31
00032f ef6f      	SER  R22
000330 e77f      	LDI  R23,0x7F
000331 f977      	BLD  R23,7
000332 c01a      	RJMP __CFD15
                 __CFD17:
000333 2777      	CLR  R23
000334 2355      	TST  R21
000335 f0b9      	BREQ __CFD15
                 __CFD18:
000336 0fee      	LSL  R30
000337 1fff      	ROL  R31
000338 1f66      	ROL  R22
000339 1f77      	ROL  R23
00033a 955a      	DEC  R21
00033b f7d1      	BRNE __CFD18
00033c c010      	RJMP __CFD15
                 __CFD11:
00033d 2777      	CLR  R23
                 __CFD12:
00033e 3058      	CPI  R21,8
00033f f028      	BRLO __CFD13
000340 2fef      	MOV  R30,R31
000341 2ff6      	MOV  R31,R22
000342 2f67      	MOV  R22,R23
000343 5058      	SUBI R21,8
000344 cff9      	RJMP __CFD12
                 __CFD13:
000345 2355      	TST  R21
000346 f031      	BREQ __CFD15
                 __CFD14:
000347 9576      	LSR  R23
000348 9567      	ROR  R22
000349 95f7      	ROR  R31
00034a 95e7      	ROR  R30
00034b 955a      	DEC  R21
00034c f7d1      	BRNE __CFD14
                 __CFD15:
00034d 2000      	TST  R0
00034e f40a      	BRPL __CFD16
00034f d145      	RCALL __ANEGD1
                 __CFD16:
000350 915f      	POP  R21
000351 9508      	RET
                 
                 __CDF1U:
000352 9468      	SET
000353 c001      	RJMP __CDF1U0
                 __CDF1:
000354 94e8      	CLT
                 __CDF1U0:
000355 9730      	SBIW R30,0
000356 4060      	SBCI R22,0
000357 4070      	SBCI R23,0
000358 f0b1      	BREQ __CDF10
000359 2400      	CLR  R0
00035a f026      	BRTS __CDF11
00035b 2377      	TST  R23
00035c f412      	BRPL __CDF11
00035d 9400      	COM  R0
00035e d136      	RCALL __ANEGD1
                 __CDF11:
00035f 2e17      	MOV  R1,R23
000360 e17e      	LDI  R23,30
000361 2011      	TST  R1
                 __CDF12:
000362 f032      	BRMI __CDF13
000363 957a      	DEC  R23
000364 0fee      	LSL  R30
000365 1fff      	ROL  R31
000366 1f66      	ROL  R22
000367 1c11      	ROL  R1
000368 cff9      	RJMP __CDF12
                 __CDF13:
000369 2fef      	MOV  R30,R31
00036a 2ff6      	MOV  R31,R22
00036b 2d61      	MOV  R22,R1
00036c 935f      	PUSH R21
00036d df8a      	RCALL __REPACK
00036e 915f      	POP  R21
                 __CDF10:
00036f 9508      	RET
                 
                 __SWAPACC:
000370 934f      	PUSH R20
000371 01af      	MOVW R20,R30
000372 01fd      	MOVW R30,R26
000373 01da      	MOVW R26,R20
000374 01ab      	MOVW R20,R22
000375 01bc      	MOVW R22,R24
000376 01ca      	MOVW R24,R20
000377 2d40      	MOV  R20,R0
000378 2c01      	MOV  R0,R1
000379 2e14      	MOV  R1,R20
00037a 914f      	POP  R20
00037b 9508      	RET
                 
                 __UADD12:
00037c 0fea      	ADD  R30,R26
00037d 1ffb      	ADC  R31,R27
00037e 1f68      	ADC  R22,R24
00037f 9508      	RET
                 
                 __NEGMAN1:
000380 95e0      	COM  R30
000381 95f0      	COM  R31
000382 9560      	COM  R22
000383 5fef      	SUBI R30,-1
000384 4fff      	SBCI R31,-1
000385 4f6f      	SBCI R22,-1
000386 9508      	RET
                 
                 __SUBF12:
000387 935f      	PUSH R21
000388 df81      	RCALL __UNPACK
000389 3890      	CPI  R25,0x80
00038a f171      	BREQ __ADDF129
00038b e850      	LDI  R21,0x80
00038c 2615      	EOR  R1,R21
                 
00038d c004      	RJMP __ADDF120
                 
                 __ADDF12:
00038e 935f      	PUSH R21
00038f df7a      	RCALL __UNPACK
000390 3890      	CPI  R25,0x80
000391 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000392 3870      	CPI  R23,0x80
000393 f121      	BREQ __ADDF128
                 __ADDF121:
000394 2f57      	MOV  R21,R23
000395 1b59      	SUB  R21,R25
000396 f12b      	BRVS __ADDF1211
000397 f412      	BRPL __ADDF122
000398 dfd7      	RCALL __SWAPACC
000399 cffa      	RJMP __ADDF121
                 __ADDF122:
00039a 3158      	CPI  R21,24
00039b f018      	BRLO __ADDF123
00039c 27aa      	CLR  R26
00039d 27bb      	CLR  R27
00039e 2788      	CLR  R24
                 __ADDF123:
00039f 3058      	CPI  R21,8
0003a0 f028      	BRLO __ADDF124
0003a1 2fab      	MOV  R26,R27
0003a2 2fb8      	MOV  R27,R24
0003a3 2788      	CLR  R24
0003a4 5058      	SUBI R21,8
0003a5 cff9      	RJMP __ADDF123
                 __ADDF124:
0003a6 2355      	TST  R21
0003a7 f029      	BREQ __ADDF126
                 __ADDF125:
0003a8 9586      	LSR  R24
0003a9 95b7      	ROR  R27
0003aa 95a7      	ROR  R26
0003ab 955a      	DEC  R21
0003ac f7d9      	BRNE __ADDF125
                 __ADDF126:
0003ad 2d50      	MOV  R21,R0
0003ae 2551      	EOR  R21,R1
0003af f072      	BRMI __ADDF127
0003b0 dfcb      	RCALL __UADD12
0003b1 f438      	BRCC __ADDF129
0003b2 9567      	ROR  R22
0003b3 95f7      	ROR  R31
0003b4 95e7      	ROR  R30
0003b5 9573      	INC  R23
0003b6 f413      	BRVC __ADDF129
0003b7 c020      	RJMP __MAXRES
                 __ADDF128:
0003b8 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0003b9 df3e      	RCALL __REPACK
0003ba 915f      	POP  R21
0003bb 9508      	RET
                 __ADDF1211:
0003bc f7d8      	BRCC __ADDF128
0003bd cffb      	RJMP __ADDF129
                 __ADDF127:
0003be 1bea      	SUB  R30,R26
0003bf 0bfb      	SBC  R31,R27
0003c0 0b68      	SBC  R22,R24
0003c1 f051      	BREQ __ZERORES
0003c2 f410      	BRCC __ADDF1210
0003c3 9400      	COM  R0
0003c4 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0003c5 2366      	TST  R22
0003c6 f392      	BRMI __ADDF129
0003c7 0fee      	LSL  R30
0003c8 1fff      	ROL  R31
0003c9 1f66      	ROL  R22
0003ca 957a      	DEC  R23
0003cb f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0003cc 27ee      	CLR  R30
0003cd 27ff      	CLR  R31
0003ce 2766      	CLR  R22
0003cf 2777      	CLR  R23
0003d0 915f      	POP  R21
0003d1 9508      	RET
                 
                 __MINRES:
0003d2 efef      	SER  R30
0003d3 efff      	SER  R31
0003d4 e76f      	LDI  R22,0x7F
0003d5 ef7f      	SER  R23
0003d6 915f      	POP  R21
0003d7 9508      	RET
                 
                 __MAXRES:
0003d8 efef      	SER  R30
0003d9 efff      	SER  R31
0003da e76f      	LDI  R22,0x7F
0003db e77f      	LDI  R23,0x7F
0003dc 915f      	POP  R21
0003dd 9508      	RET
                 
                 __MULF12:
0003de 935f      	PUSH R21
0003df df2a      	RCALL __UNPACK
0003e0 3870      	CPI  R23,0x80
0003e1 f351      	BREQ __ZERORES
0003e2 3890      	CPI  R25,0x80
0003e3 f341      	BREQ __ZERORES
0003e4 2401      	EOR  R0,R1
0003e5 9408      	SEC
0003e6 1f79      	ADC  R23,R25
0003e7 f423      	BRVC __MULF124
0003e8 f31c      	BRLT __ZERORES
                 __MULF125:
0003e9 2000      	TST  R0
0003ea f33a      	BRMI __MINRES
0003eb cfec      	RJMP __MAXRES
                 __MULF124:
0003ec 920f      	PUSH R0
0003ed 931f      	PUSH R17
0003ee 932f      	PUSH R18
0003ef 933f      	PUSH R19
0003f0 934f      	PUSH R20
0003f1 2711      	CLR  R17
0003f2 2722      	CLR  R18
0003f3 2799      	CLR  R25
0003f4 9f68      	MUL  R22,R24
0003f5 01a0      	MOVW R20,R0
0003f6 9f8f      	MUL  R24,R31
0003f7 2d30      	MOV  R19,R0
0003f8 0d41      	ADD  R20,R1
0003f9 1f59      	ADC  R21,R25
0003fa 9f6b      	MUL  R22,R27
0003fb 0d30      	ADD  R19,R0
0003fc 1d41      	ADC  R20,R1
0003fd 1f59      	ADC  R21,R25
0003fe 9f8e      	MUL  R24,R30
0003ff d027      	RCALL __MULF126
000400 9fbf      	MUL  R27,R31
000401 d025      	RCALL __MULF126
000402 9f6a      	MUL  R22,R26
000403 d023      	RCALL __MULF126
000404 9fbe      	MUL  R27,R30
000405 d01d      	RCALL __MULF127
000406 9faf      	MUL  R26,R31
000407 d01b      	RCALL __MULF127
000408 9fae      	MUL  R26,R30
000409 0d11      	ADD  R17,R1
00040a 1f29      	ADC  R18,R25
00040b 1f39      	ADC  R19,R25
00040c 1f49      	ADC  R20,R25
00040d 1f59      	ADC  R21,R25
00040e 2fe3      	MOV  R30,R19
00040f 2ff4      	MOV  R31,R20
000410 2f65      	MOV  R22,R21
000411 2f52      	MOV  R21,R18
000412 914f      	POP  R20
000413 913f      	POP  R19
000414 912f      	POP  R18
000415 911f      	POP  R17
000416 900f      	POP  R0
000417 2366      	TST  R22
000418 f02a      	BRMI __MULF122
000419 0f55      	LSL  R21
00041a 1fee      	ROL  R30
00041b 1fff      	ROL  R31
00041c 1f66      	ROL  R22
00041d c002      	RJMP __MULF123
                 __MULF122:
00041e 9573      	INC  R23
00041f f24b      	BRVS __MULF125
                 __MULF123:
000420 decd      	RCALL __ROUND_REPACK
000421 915f      	POP  R21
000422 9508      	RET
                 
                 __MULF127:
000423 0d10      	ADD  R17,R0
000424 1d21      	ADC  R18,R1
000425 1f39      	ADC  R19,R25
000426 c002      	RJMP __MULF128
                 __MULF126:
000427 0d20      	ADD  R18,R0
000428 1d31      	ADC  R19,R1
                 __MULF128:
000429 1f49      	ADC  R20,R25
00042a 1f59      	ADC  R21,R25
00042b 9508      	RET
                 
                 __DIVF21:
00042c 935f      	PUSH R21
00042d dedc      	RCALL __UNPACK
00042e 3870      	CPI  R23,0x80
00042f f421      	BRNE __DIVF210
000430 2011      	TST  R1
                 __DIVF211:
000431 f40a      	BRPL __DIVF219
000432 cf9f      	RJMP __MINRES
                 __DIVF219:
000433 cfa4      	RJMP __MAXRES
                 __DIVF210:
000434 3890      	CPI  R25,0x80
000435 f409      	BRNE __DIVF218
                 __DIVF217:
000436 cf95      	RJMP __ZERORES
                 __DIVF218:
000437 2401      	EOR  R0,R1
000438 9408      	SEC
000439 0b97      	SBC  R25,R23
00043a f41b      	BRVC __DIVF216
00043b f3d4      	BRLT __DIVF217
00043c 2000      	TST  R0
00043d cff3      	RJMP __DIVF211
                 __DIVF216:
00043e 2f79      	MOV  R23,R25
00043f 931f      	PUSH R17
000440 932f      	PUSH R18
000441 933f      	PUSH R19
000442 934f      	PUSH R20
000443 2411      	CLR  R1
000444 2711      	CLR  R17
000445 2722      	CLR  R18
000446 2733      	CLR  R19
000447 2744      	CLR  R20
000448 2755      	CLR  R21
000449 e290      	LDI  R25,32
                 __DIVF212:
00044a 17ae      	CP   R26,R30
00044b 07bf      	CPC  R27,R31
00044c 0786      	CPC  R24,R22
00044d 0741      	CPC  R20,R17
00044e f030      	BRLO __DIVF213
00044f 1bae      	SUB  R26,R30
000450 0bbf      	SBC  R27,R31
000451 0b86      	SBC  R24,R22
000452 0b41      	SBC  R20,R17
000453 9408      	SEC
000454 c001      	RJMP __DIVF214
                 __DIVF213:
000455 9488      	CLC
                 __DIVF214:
000456 1f55      	ROL  R21
000457 1f22      	ROL  R18
000458 1f33      	ROL  R19
000459 1c11      	ROL  R1
00045a 1faa      	ROL  R26
00045b 1fbb      	ROL  R27
00045c 1f88      	ROL  R24
00045d 1f44      	ROL  R20
00045e 959a      	DEC  R25
00045f f751      	BRNE __DIVF212
000460 01f9      	MOVW R30,R18
000461 2d61      	MOV  R22,R1
000462 914f      	POP  R20
000463 913f      	POP  R19
000464 912f      	POP  R18
000465 911f      	POP  R17
000466 2366      	TST  R22
000467 f032      	BRMI __DIVF215
000468 0f55      	LSL  R21
000469 1fee      	ROL  R30
00046a 1fff      	ROL  R31
00046b 1f66      	ROL  R22
00046c 957a      	DEC  R23
00046d f243      	BRVS __DIVF217
                 __DIVF215:
00046e de7f      	RCALL __ROUND_REPACK
00046f 915f      	POP  R21
000470 9508      	RET
                 
                 __CMPF12:
000471 2399      	TST  R25
000472 f09a      	BRMI __CMPF120
000473 2377      	TST  R23
000474 f042      	BRMI __CMPF121
000475 1797      	CP   R25,R23
000476 f048      	BRLO __CMPF122
000477 f429      	BRNE __CMPF121
000478 17ae      	CP   R26,R30
000479 07bf      	CPC  R27,R31
00047a 0786      	CPC  R24,R22
00047b f020      	BRLO __CMPF122
00047c f031      	BREQ __CMPF123
                 __CMPF121:
00047d 9498      	CLZ
00047e 9488      	CLC
00047f 9508      	RET
                 __CMPF122:
000480 9498      	CLZ
000481 9408      	SEC
000482 9508      	RET
                 __CMPF123:
000483 9418      	SEZ
000484 9488      	CLC
000485 9508      	RET
                 __CMPF120:
000486 2377      	TST  R23
000487 f7c2      	BRPL __CMPF122
000488 1797      	CP   R25,R23
000489 f398      	BRLO __CMPF121
00048a f7a9      	BRNE __CMPF122
00048b 17ea      	CP   R30,R26
00048c 07fb      	CPC  R31,R27
00048d 0768      	CPC  R22,R24
00048e f388      	BRLO __CMPF122
00048f f399      	BREQ __CMPF123
000490 cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
000491 95f1      	NEG  R31
000492 95e1      	NEG  R30
000493 40f0      	SBCI R31,0
000494 9508      	RET
                 
                 __ANEGD1:
000495 95f0      	COM  R31
000496 9560      	COM  R22
000497 9570      	COM  R23
000498 95e1      	NEG  R30
000499 4fff      	SBCI R31,-1
00049a 4f6f      	SBCI R22,-1
00049b 4f7f      	SBCI R23,-1
00049c 9508      	RET
                 
                 __CWD1:
00049d 2f6f      	MOV  R22,R31
00049e 0f66      	ADD  R22,R22
00049f 0b66      	SBC  R22,R22
0004a0 2f76      	MOV  R23,R22
0004a1 9508      	RET
                 
                 __DIVW21U:
0004a2 2400      	CLR  R0
0004a3 2411      	CLR  R1
0004a4 e190      	LDI  R25,16
                 __DIVW21U1:
0004a5 0faa      	LSL  R26
0004a6 1fbb      	ROL  R27
0004a7 1c00      	ROL  R0
0004a8 1c11      	ROL  R1
0004a9 1a0e      	SUB  R0,R30
0004aa 0a1f      	SBC  R1,R31
0004ab f418      	BRCC __DIVW21U2
0004ac 0e0e      	ADD  R0,R30
0004ad 1e1f      	ADC  R1,R31
0004ae c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004af 60a1      	SBR  R26,1
                 __DIVW21U3:
0004b0 959a      	DEC  R25
0004b1 f799      	BRNE __DIVW21U1
0004b2 01fd      	MOVW R30,R26
0004b3 01d0      	MOVW R26,R0
0004b4 9508      	RET
                 
                 __DIVW21:
0004b5 d004      	RCALL __CHKSIGNW
0004b6 dfeb      	RCALL __DIVW21U
0004b7 f40e      	BRTC __DIVW211
0004b8 dfd8      	RCALL __ANEGW1
                 __DIVW211:
0004b9 9508      	RET
                 
                 __CHKSIGNW:
0004ba 94e8      	CLT
0004bb fff7      	SBRS R31,7
0004bc c002      	RJMP __CHKSW1
0004bd dfd3      	RCALL __ANEGW1
0004be 9468      	SET
                 __CHKSW1:
0004bf ffb7      	SBRS R27,7
0004c0 c006      	RJMP __CHKSW2
0004c1 95a0      	COM  R26
0004c2 95b0      	COM  R27
0004c3 9611      	ADIW R26,1
0004c4 f800      	BLD  R0,0
0004c5 9403      	INC  R0
0004c6 fa00      	BST  R0,0
                 __CHKSW2:
0004c7 9508      	RET
                 
                 __GETD1S0:
0004c8 81e8      	LD   R30,Y
0004c9 81f9      	LDD  R31,Y+1
0004ca 816a      	LDD  R22,Y+2
0004cb 817b      	LDD  R23,Y+3
0004cc 9508      	RET
                 
                 __GETD2S0:
0004cd 81a8      	LD   R26,Y
0004ce 81b9      	LDD  R27,Y+1
0004cf 818a      	LDD  R24,Y+2
0004d0 819b      	LDD  R25,Y+3
0004d1 9508      	RET
                 
                 __PUTD1S0:
0004d2 83e8      	ST   Y,R30
0004d3 83f9      	STD  Y+1,R31
0004d4 836a      	STD  Y+2,R22
0004d5 837b      	STD  Y+3,R23
0004d6 9508      	RET
                 
                 __PUTPARD1:
0004d7 937a      	ST   -Y,R23
0004d8 936a      	ST   -Y,R22
0004d9 93fa      	ST   -Y,R31
0004da 93ea      	ST   -Y,R30
0004db 9508      	RET
                 
                 __PUTPARD2:
0004dc 939a      	ST   -Y,R25
0004dd 938a      	ST   -Y,R24
0004de 93ba      	ST   -Y,R27
0004df 93aa      	ST   -Y,R26
0004e0 9508      	RET
                 
                 __SWAPD12:
0004e1 2e18      	MOV  R1,R24
0004e2 2f86      	MOV  R24,R22
0004e3 2d61      	MOV  R22,R1
0004e4 2e19      	MOV  R1,R25
0004e5 2f97      	MOV  R25,R23
0004e6 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0004e7 2e1b      	MOV  R1,R27
0004e8 2fbf      	MOV  R27,R31
0004e9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0004ea 2e1a      	MOV  R1,R26
0004eb 2fae      	MOV  R26,R30
0004ec 2de1      	MOV  R30,R1
0004ed 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  37 r1 :  34 r2 :   0 r3 :   0 r4 :   5 r5 :   0 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  25 r18:  12 r19:  12 r20:  22 r21:  63 r22:  71 r23:  66 
r24:  59 r25:  52 r26: 104 r27:  52 r28:   7 r29:   1 r30: 201 r31:  67 
x  :  11 y  : 129 z  :   9 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   9 and   :   5 andi  :   2 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   1 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  30 brpl  :   8 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  :  81 
cbi   :   5 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  31 cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :  10 
cp    :   7 cpc   :  12 cpi   :  28 cpse  :   0 dec   :  15 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   5 jmp   :  24 ld    :  24 ldd   :  55 ldi   : 118 
lds   :   0 lpm   :   8 lsl   :  13 lsr   :   3 mov   :  53 movw  :  22 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  44 pop   :  18 push  :  18 rcall :  38 ret   :  50 
reti  :   0 rjmp  :  48 rol   :  27 ror   :  15 sbc   :   8 sbci  :  11 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :  11 sbr   :   3 sbrc  :   1 
sbrs  :   3 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  42 std   :  20 sts   :   2 sub   :   5 subi  :  15 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009dc   2478     46   2524   32768   7.7%
[.dseg] 0x000060 0x000279      0     25     25    2048   1.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
