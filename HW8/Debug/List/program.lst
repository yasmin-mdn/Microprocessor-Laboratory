
AVRASM ver. 2.1.30  D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm Sun Apr 24 09:42:17 2022

D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _operand=R5
                 	.DEF _count=R6
                 	.DEF _count_msb=R7
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002b 454b
00002c 5059
00002d 4441
00002e 4120      	.DB  0x4B,0x45,0x59,0x50,0x41,0x44,0x20,0x41
00002f 444e
000030 4c20
000031 4443
000032 5000      	.DB  0x4E,0x44,0x20,0x4C,0x43,0x44,0x0,0x50
000033 4f52
000034 454a
000035 5443
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1131): warning: .cseg .db misalignment - padding zero byte
000036 0000      	.DB  0x52,0x4F,0x4A,0x45,0x43,0x54,0x0
                 _0x2000003:
000037 c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1135): warning: .cseg .db misalignment - padding zero byte
000038 0001      	.DB  0x1
                 _0x2020000:
000039 4e2d
00003a 4e41
00003b 4900
00003c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\E\uni\term8\AZ-Microp\HWs\HW8\Debug\List\program.asm(1138): warning: .cseg .db misalignment - padding zero byte
00003d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003e 0002      	.DW  0x02
00003f 0006      	.DW  0x06
000040 0054      	.DW  __REG_VARS*2
                 
000041 000f      	.DW  0x0F
000042 0260      	.DW  _0x3
000043 0056      	.DW  _0x0*2
                 
000044 0008      	.DW  0x08
000045 026f      	.DW  _0x3+15
000046 0065      	.DW  _0x0*2+15
                 
000047 0002      	.DW  0x02
000048 0288      	.DW  __base_y_G100
000049 006e      	.DW  _0x2000003*2
                 
00004a 0001      	.DW  0x01
00004b 028c      	.DW  __seed_G101
00004c 0070      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00004d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004e 94f8      	CLI
00004f 27ee      	CLR  R30
000050 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000051 e0f1      	LDI  R31,1
000052 bffb      	OUT  GICR,R31
000053 bfeb      	OUT  GICR,R30
000054 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000055 e08d      	LDI  R24,(14-2)+1
000056 e0a2      	LDI  R26,2
000057 27bb      	CLR  R27
                 __CLEAR_REG:
000058 93ed      	ST   X+,R30
000059 958a      	DEC  R24
00005a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005e 93ed      	ST   X+,R30
00005f 9701      	SBIW R24,1
000060 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000061 e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000062 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000063 9185      	LPM  R24,Z+
000064 9195      	LPM  R25,Z+
000065 9700      	SBIW R24,0
000066 f061      	BREQ __GLOBAL_INI_END
000067 91a5      	LPM  R26,Z+
000068 91b5      	LPM  R27,Z+
000069 9005      	LPM  R0,Z+
00006a 9015      	LPM  R1,Z+
00006b 01bf      	MOVW R22,R30
00006c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006d 9005      	LPM  R0,Z+
00006e 920d      	ST   X+,R0
00006f 9701      	SBIW R24,1
000070 f7e1      	BRNE __GLOBAL_INI_LOOP
000071 01fb      	MOVW R30,R22
000072 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 007b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ;Yasmin Madani
                 ;97532265
                 ;*/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define KEYPAD_R1 PORTD.0
                 ;#define KEYPAD_R2 PORTD.1
                 ;#define KEYPAD_R3 PORTD.2
                 ;#define KEYPAD_R4 PORTD.3
                 ;#define KEYPAD_C1 PIND.4
                 ;#define KEYPAD_C2 PIND.5
                 ;#define KEYPAD_C3 PIND.6
                 ;#define KEYPAD_C4 PIND.7
                 ;
                 ;#define KEYPAD_NUM0 0
                 ;#define KEYPAD_NUM1 1
                 ;#define KEYPAD_NUM2 2
                 ;#define KEYPAD_NUM3 3
                 ;#define KEYPAD_NUM4 4
                 ;#define KEYPAD_NUM5 5
                 ;#define KEYPAD_NUM6 6
                 ;#define KEYPAD_NUM7 7
                 ;#define KEYPAD_NUM8 8
                 ;#define KEYPAD_NUM9 9
                 ;#define KEYPAD_DIV  10
                 ;#define KEYPAD_MUL  11
                 ;#define KEYPAD_PLS  12
                 ;#define KEYPAD_MNS  13
                 ;#define KEYPAD_EQU  14
                 ;#define KEYPAD_ON   15
                 ;
                 ;char show_arr[5];
                 ;float op_arr[3];
                 ;char operand;
                 ;int count = 0;
                 ;
                 ;unsigned char keypad_scan();
                 ;
                 ;void main(void) {
                 ; 0000 002C void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002D     unsigned char key_res;
                 ; 0000 002E     DDRC=0xFF;
                 ;	key_res -> R17
00007b efef      	LDI  R30,LOW(255)
00007c bbe4      	OUT  0x14,R30
                 ; 0000 002F     DDRD=0x0F;
00007d e0ef      	LDI  R30,LOW(15)
00007e bbe1      	OUT  0x11,R30
                 ; 0000 0030     PORTC=0x00;
00007f e0e0      	LDI  R30,LOW(0)
000080 bbe5      	OUT  0x15,R30
                 ; 0000 0031 
                 ; 0000 0032     lcd_init(16);
000081 e1a0      	LDI  R26,LOW(16)
000082 d178      	RCALL _lcd_init
                 ; 0000 0033     lcd_clear();
000083 d145      	RCALL _lcd_clear
                 ; 0000 0034     lcd_gotoxy(1,0);
000084 e0e1      	LDI  R30,LOW(1)
000085 93ea      	ST   -Y,R30
000086 e0a0      	LDI  R26,LOW(0)
000087 d134      	RCALL _lcd_gotoxy
                 ; 0000 0035     lcd_puts("KEYPAD AND LCD");
                +
000088 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
000089 e0b2     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
00008a d15f      	RCALL _lcd_puts
                 ; 0000 0036     lcd_gotoxy(5,1);
00008b e0e5      	LDI  R30,LOW(5)
00008c 93ea      	ST   -Y,R30
00008d e0a1      	LDI  R26,LOW(1)
00008e d12d      	RCALL _lcd_gotoxy
                 ; 0000 0037     lcd_puts("PROJECT");
                +
00008f e6af     +LDI R26 , LOW ( _0x3 + ( 15 ) )
000090 e0b2     +LDI R27 , HIGH ( _0x3 + ( 15 ) )
                 	__POINTW2MN _0x3,15
000091 d158      	RCALL _lcd_puts
                 ; 0000 0038     delay_ms(2000);
000092 eda0      	LDI  R26,LOW(2000)
000093 e0b7      	LDI  R27,HIGH(2000)
000094 940e 03c5 	CALL _delay_ms
                 ; 0000 0039     lcd_clear();
000096 d132      	RCALL _lcd_clear
                 ; 0000 003A 
                 ; 0000 003B     while (1) {
                 _0x4:
                 ; 0000 003C         key_res = keypad_scan();
000097 d0af      	RCALL _keypad_scan
000098 2f1e      	MOV  R17,R30
                 ; 0000 003D 
                 ; 0000 003E         if(key_res != 255) {
000099 3f1f      	CPI  R17,255
00009a f409      	BRNE PC+2
00009b c0a9      	RJMP _0x7
                 ; 0000 003F             while(keypad_scan() != 255);
                 _0x8:
00009c d0aa      	RCALL _keypad_scan
00009d 3fef      	CPI  R30,LOW(0xFF)
00009e f7e9      	BRNE _0x8
                 ; 0000 0040             delay_ms(20);
00009f e1a4      	LDI  R26,LOW(20)
0000a0 e0b0      	LDI  R27,0
0000a1 940e 03c5 	CALL _delay_ms
                 ; 0000 0041 
                 ; 0000 0042             if (key_res == KEYPAD_DIV) {
0000a3 301a      	CPI  R17,10
0000a4 f431      	BRNE _0xB
                 ; 0000 0043                 lcd_putchar('%');
0000a5 e2a5      	LDI  R26,LOW(37)
0000a6 d12e      	RCALL _lcd_putchar
                 ; 0000 0044                 operand = '%';
0000a7 e2e5      	LDI  R30,LOW(37)
0000a8 940e 034b 	CALL SUBOPT_0x0
                 ; 0000 0045                 count++;
                 ; 0000 0046             }
                 ; 0000 0047 
                 ; 0000 0048             else if (key_res == KEYPAD_MUL) {
0000aa c09a      	RJMP _0xC
                 _0xB:
0000ab 301b      	CPI  R17,11
0000ac f431      	BRNE _0xD
                 ; 0000 0049               lcd_putchar('*');
0000ad e2aa      	LDI  R26,LOW(42)
0000ae d126      	RCALL _lcd_putchar
                 ; 0000 004A               operand = '*';
0000af e2ea      	LDI  R30,LOW(42)
0000b0 940e 034b 	CALL SUBOPT_0x0
                 ; 0000 004B               count++;
                 ; 0000 004C             }
                 ; 0000 004D 
                 ; 0000 004E             else if (key_res == KEYPAD_MNS) {
0000b2 c092      	RJMP _0xE
                 _0xD:
0000b3 301d      	CPI  R17,13
0000b4 f431      	BRNE _0xF
                 ; 0000 004F                 lcd_putchar('-');
0000b5 e2ad      	LDI  R26,LOW(45)
0000b6 d11e      	RCALL _lcd_putchar
                 ; 0000 0050                 operand = '-';
0000b7 e2ed      	LDI  R30,LOW(45)
0000b8 940e 034b 	CALL SUBOPT_0x0
                 ; 0000 0051                 count++;
                 ; 0000 0052             }
                 ; 0000 0053 
                 ; 0000 0054             else if (key_res == KEYPAD_PLS) {
0000ba c08a      	RJMP _0x10
                 _0xF:
0000bb 301c      	CPI  R17,12
0000bc f431      	BRNE _0x11
                 ; 0000 0055                 lcd_putchar('+');
0000bd e2ab      	LDI  R26,LOW(43)
0000be d116      	RCALL _lcd_putchar
                 ; 0000 0056                 operand = '+';
0000bf e2eb      	LDI  R30,LOW(43)
0000c0 940e 034b 	CALL SUBOPT_0x0
                 ; 0000 0057                 count++;
                 ; 0000 0058             }
                 ; 0000 0059 
                 ; 0000 005A             else if (key_res == KEYPAD_EQU) {
0000c2 c082      	RJMP _0x12
                 _0x11:
0000c3 301e      	CPI  R17,14
0000c4 f5e9      	BRNE _0x13
                 ; 0000 005B                 if(operand == '+')
0000c5 e2eb      	LDI  R30,LOW(43)
0000c6 15e5      	CP   R30,R5
0000c7 f429      	BRNE _0x14
                 ; 0000 005C                     op_arr[2] = op_arr[0] + op_arr[1];
0000c8 940e 0350 	CALL SUBOPT_0x1
0000ca 940e 0475 	CALL __ADDF12
0000cc c017      	RJMP _0x5B
                 ; 0000 005D                 else if(operand == '-')
                 _0x14:
0000cd e2ed      	LDI  R30,LOW(45)
0000ce 15e5      	CP   R30,R5
0000cf f429      	BRNE _0x16
                 ; 0000 005E                     op_arr[2] = op_arr[0] - op_arr[1];
0000d0 940e 0350 	CALL SUBOPT_0x1
0000d2 940e 0361 	CALL SUBOPT_0x2
0000d4 c00f      	RJMP _0x5B
                 ; 0000 005F                 else if(operand == '%')
                 _0x16:
0000d5 e2e5      	LDI  R30,LOW(37)
0000d6 15e5      	CP   R30,R5
0000d7 f429      	BRNE _0x18
                 ; 0000 0060                     op_arr[2] = op_arr[0] / op_arr[1];
0000d8 940e 0350 	CALL SUBOPT_0x1
0000da 940e 0513 	CALL __DIVF21
0000dc c007      	RJMP _0x5B
                 ; 0000 0061                 else if(operand == '*')
                 _0x18:
0000dd e2ea      	LDI  R30,LOW(42)
0000de 15e5      	CP   R30,R5
0000df f461      	BRNE _0x1A
                 ; 0000 0062                     op_arr[2] = op_arr[0] * op_arr[1];
0000e0 940e 0350 	CALL SUBOPT_0x1
0000e2 940e 04c5 	CALL __MULF12
                 _0x5B:
                +
0000e4 93e0 0284+STS _op_arr + ( 8 ) , R30
0000e6 93f0 0285+STS _op_arr + ( 8 ) + 1 , R31
0000e8 9360 0286+STS _op_arr + ( 8 ) + 2 , R22
0000ea 9370 0287+STS _op_arr + ( 8 ) + 3 , R23
                 	__PUTD1MN _op_arr,8
                 ; 0000 0063 
                 ; 0000 0064                 lcd_putchar('=');
                 _0x1A:
0000ec e3ad      	LDI  R26,LOW(61)
0000ed d0e7      	RCALL _lcd_putchar
                 ; 0000 0065                 ftoa(op_arr[2],2,show_arr);
                +
0000ee 91e0 0284+LDS R30 , _op_arr + ( 8 )
0000f0 91f0 0285+LDS R31 , _op_arr + ( 8 ) + 1
0000f2 9160 0286+LDS R22 , _op_arr + ( 8 ) + 2
0000f4 9170 0287+LDS R23 , _op_arr + ( 8 ) + 3
                 	__GETD1MN _op_arr,8
0000f6 940e 05a9 	CALL __PUTPARD1
0000f8 e0e2      	LDI  R30,LOW(2)
0000f9 93ea      	ST   -Y,R30
0000fa e7a7      	LDI  R26,LOW(_show_arr)
0000fb e0b2      	LDI  R27,HIGH(_show_arr)
0000fc 940e 0229 	CALL _ftoa
                 ; 0000 0066                 lcd_puts(show_arr);
0000fe e7a7      	LDI  R26,LOW(_show_arr)
0000ff e0b2      	LDI  R27,HIGH(_show_arr)
000100 d0e9      	RCALL _lcd_puts
                 ; 0000 0067             }
                 ; 0000 0068 
                 ; 0000 0069             else if (key_res == KEYPAD_ON) {
000101 c043      	RJMP _0x1B
                 _0x13:
000102 301f      	CPI  R17,15
000103 f4d1      	BRNE _0x1C
                 ; 0000 006A                 count = 0;
000104 2466      	CLR  R6
000105 2477      	CLR  R7
                 ; 0000 006B                 op_arr[0] = 0;
000106 e0e0      	LDI  R30,LOW(0)
000107 93e0 027c 	STS  _op_arr,R30
000109 93e0 027d 	STS  _op_arr+1,R30
00010b 93e0 027e 	STS  _op_arr+2,R30
00010d 93e0 027f 	STS  _op_arr+3,R30
                 ; 0000 006C                 op_arr[1] = 0;
                +
00010f e8e0     +LDI R30 , LOW ( _op_arr + ( 4 ) )
000110 e0f2     +LDI R31 , HIGH ( _op_arr + ( 4 ) )
                 	__POINTW1MN _op_arr,4
000111 940e 0366 	CALL SUBOPT_0x3
                 ; 0000 006D                 op_arr[2] = 0;
                +
000113 e8e4     +LDI R30 , LOW ( _op_arr + ( 8 ) )
000114 e0f2     +LDI R31 , HIGH ( _op_arr + ( 8 ) )
                 	__POINTW1MN _op_arr,8
000115 940e 0366 	CALL SUBOPT_0x3
                 ; 0000 006E                 operand = '';
000117 2455      	CLR  R5
                 ; 0000 006F                 lcd_clear();
000118 d0b0      	RCALL _lcd_clear
                 ; 0000 0070                 lcd_gotoxy(0,0);
000119 e0e0      	LDI  R30,LOW(0)
00011a 93ea      	ST   -Y,R30
00011b e0a0      	LDI  R26,LOW(0)
00011c d09f      	RCALL _lcd_gotoxy
                 ; 0000 0071             }
                 ; 0000 0072 
                 ; 0000 0073             else {
00011d c027      	RJMP _0x1D
                 _0x1C:
                 ; 0000 0074                 lcd_putchar(key_res + 48);
00011e 2fa1      	MOV  R26,R17
00011f 5da0      	SUBI R26,-LOW(48)
000120 d0b4      	RCALL _lcd_putchar
                 ; 0000 0075                 op_arr[count] *=10;
000121 940e 036d 	CALL SUBOPT_0x4
000123 93ff      	PUSH R31
000124 93ef      	PUSH R30
000125 01df      	MOVW R26,R30
000126 940e 058a 	CALL __GETD1P
                +
000128 e0a0     +LDI R26 , LOW ( 0x41200000 )
000129 e0b0     +LDI R27 , HIGH ( 0x41200000 )
00012a e280     +LDI R24 , BYTE3 ( 0x41200000 )
00012b e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
00012c 940e 04c5 	CALL __MULF12
00012e 91af      	POP  R26
00012f 91bf      	POP  R27
000130 940e 0590 	CALL __PUTDP1
                 ; 0000 0076                 op_arr[count] += key_res;
000132 940e 036d 	CALL SUBOPT_0x4
000134 93ff      	PUSH R31
000135 93ef      	PUSH R30
000136 01df      	MOVW R26,R30
000137 940e 058a 	CALL __GETD1P
000139 01df      	MOVW R26,R30
00013a 01cb      	MOVW R24,R22
00013b 2fe1      	MOV  R30,R17
00013c e0f0      	LDI  R31,0
00013d 940e 0375 	CALL SUBOPT_0x5
00013f 940e 0475 	CALL __ADDF12
000141 91af      	POP  R26
000142 91bf      	POP  R27
000143 940e 0590 	CALL __PUTDP1
                 ; 0000 0077             }
                 _0x1D:
                 _0x1B:
                 _0x12:
                 _0x10:
                 _0xE:
                 _0xC:
                 ; 0000 0078         }
                 ; 0000 0079     }
                 _0x7:
000145 cf51      	RJMP _0x4
                 ; 0000 007A }
                 _0x1E:
000146 cfff      	RJMP _0x1E
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000260           	.BYTE 0x17
                 ;
                 ;
                 ;unsigned char keypad_scan() {
                 ; 0000 007D unsigned char keypad_scan() {
                 
                 	.CSEG
                 _keypad_scan:
                 ; .FSTART _keypad_scan
                 ; 0000 007E     unsigned char result=255;
                 ; 0000 007F 
                 ; 0000 0080     ////////////////////////  ROW1 ////////////////////////
                 ; 0000 0081     KEYPAD_R1 = 1; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0; //set Row1 for Keypad
000147 931a      	ST   -Y,R17
                 ;	result -> R17
000148 ef1f      	LDI  R17,255
000149 9a90      	SBI  0x12,0
00014a 9891      	CBI  0x12,1
00014b 940e 037a 	CALL SUBOPT_0x6
                 ; 0000 0082     delay_ms(5);
                 ; 0000 0083     if (KEYPAD_C1)
00014d 9b84      	SBIS 0x10,4
00014e c002      	RJMP _0x27
                 ; 0000 0084     result = KEYPAD_NUM7;
00014f e017      	LDI  R17,LOW(7)
                 ; 0000 0085     else if (KEYPAD_C2)
000150 c00a      	RJMP _0x28
                 _0x27:
000151 9b85      	SBIS 0x10,5
000152 c002      	RJMP _0x29
                 ; 0000 0086     result = KEYPAD_NUM8;
000153 e018      	LDI  R17,LOW(8)
                 ; 0000 0087     else if (KEYPAD_C3)
000154 c006      	RJMP _0x2A
                 _0x29:
000155 9b86      	SBIS 0x10,6
000156 c002      	RJMP _0x2B
                 ; 0000 0088     result = KEYPAD_NUM9;
000157 e019      	LDI  R17,LOW(9)
                 ; 0000 0089     else if (KEYPAD_C4)
000158 c002      	RJMP _0x2C
                 _0x2B:
000159 9987      	SBIC 0x10,7
                 ; 0000 008A     result = KEYPAD_DIV;
00015a e01a      	LDI  R17,LOW(10)
                 ; 0000 008B 
                 ; 0000 008C     ////////////////////////  ROW2 ////////////////////////
                 ; 0000 008D     KEYPAD_R1 = 0; KEYPAD_R2 = 1;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0; //set Row2 for Keypad
                 _0x2C:
                 _0x2A:
                 _0x28:
00015b 9890      	CBI  0x12,0
00015c 9a91      	SBI  0x12,1
00015d 940e 037a 	CALL SUBOPT_0x6
                 ; 0000 008E     delay_ms(5);
                 ; 0000 008F     if (KEYPAD_C1)
00015f 9b84      	SBIS 0x10,4
000160 c002      	RJMP _0x36
                 ; 0000 0090     result = KEYPAD_NUM4;
000161 e014      	LDI  R17,LOW(4)
                 ; 0000 0091     else if (KEYPAD_C2)
000162 c00a      	RJMP _0x37
                 _0x36:
000163 9b85      	SBIS 0x10,5
000164 c002      	RJMP _0x38
                 ; 0000 0092     result = KEYPAD_NUM5;
000165 e015      	LDI  R17,LOW(5)
                 ; 0000 0093     else if (KEYPAD_C3)
000166 c006      	RJMP _0x39
                 _0x38:
000167 9b86      	SBIS 0x10,6
000168 c002      	RJMP _0x3A
                 ; 0000 0094     result = KEYPAD_NUM6;
000169 e016      	LDI  R17,LOW(6)
                 ; 0000 0095     else if (KEYPAD_C4)
00016a c002      	RJMP _0x3B
                 _0x3A:
00016b 9987      	SBIC 0x10,7
                 ; 0000 0096     result = KEYPAD_MUL;
00016c e01b      	LDI  R17,LOW(11)
                 ; 0000 0097 
                 ; 0000 0098     ////////////////////////  ROW3 ////////////////////////
                 ; 0000 0099     KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 1;  KEYPAD_R4 = 0; //set Row3 for Keypad
                 _0x3B:
                 _0x39:
                 _0x37:
00016d 9890      	CBI  0x12,0
00016e 9891      	CBI  0x12,1
00016f 9a92      	SBI  0x12,2
000170 9893      	CBI  0x12,3
                 ; 0000 009A     delay_ms(5);
000171 e0a5      	LDI  R26,LOW(5)
000172 e0b0      	LDI  R27,0
000173 940e 03c5 	CALL _delay_ms
                 ; 0000 009B     if (KEYPAD_C1)
000175 9b84      	SBIS 0x10,4
000176 c002      	RJMP _0x45
                 ; 0000 009C     result = KEYPAD_NUM1;
000177 e011      	LDI  R17,LOW(1)
                 ; 0000 009D     else if (KEYPAD_C2)
000178 c00a      	RJMP _0x46
                 _0x45:
000179 9b85      	SBIS 0x10,5
00017a c002      	RJMP _0x47
                 ; 0000 009E     result = KEYPAD_NUM2;
00017b e012      	LDI  R17,LOW(2)
                 ; 0000 009F     else if (KEYPAD_C3)
00017c c006      	RJMP _0x48
                 _0x47:
00017d 9b86      	SBIS 0x10,6
00017e c002      	RJMP _0x49
                 ; 0000 00A0     result = KEYPAD_NUM3;
00017f e013      	LDI  R17,LOW(3)
                 ; 0000 00A1     else if (KEYPAD_C4)
000180 c002      	RJMP _0x4A
                 _0x49:
000181 9987      	SBIC 0x10,7
                 ; 0000 00A2     result = KEYPAD_MNS;
000182 e01d      	LDI  R17,LOW(13)
                 ; 0000 00A3 
                 ; 0000 00A4     ////////////////////////  ROW4 ////////////////////////
                 ; 0000 00A5     KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 1; //set Row4 for Keypad
                 _0x4A:
                 _0x48:
                 _0x46:
000183 9890      	CBI  0x12,0
000184 9891      	CBI  0x12,1
000185 9892      	CBI  0x12,2
000186 9a93      	SBI  0x12,3
                 ; 0000 00A6     delay_ms(5);
000187 e0a5      	LDI  R26,LOW(5)
000188 e0b0      	LDI  R27,0
000189 940e 03c5 	CALL _delay_ms
                 ; 0000 00A7     if (KEYPAD_C1)
00018b 9b84      	SBIS 0x10,4
00018c c002      	RJMP _0x54
                 ; 0000 00A8     result = KEYPAD_ON;
00018d e01f      	LDI  R17,LOW(15)
                 ; 0000 00A9     else if (KEYPAD_C2)
00018e c00a      	RJMP _0x55
                 _0x54:
00018f 9b85      	SBIS 0x10,5
000190 c002      	RJMP _0x56
                 ; 0000 00AA     result = KEYPAD_NUM0;
000191 e010      	LDI  R17,LOW(0)
                 ; 0000 00AB     else if (KEYPAD_C3)
000192 c006      	RJMP _0x57
                 _0x56:
000193 9b86      	SBIS 0x10,6
000194 c002      	RJMP _0x58
                 ; 0000 00AC     result = KEYPAD_EQU;
000195 e01e      	LDI  R17,LOW(14)
                 ; 0000 00AD     else if (KEYPAD_C4)
000196 c002      	RJMP _0x59
                 _0x58:
000197 9987      	SBIC 0x10,7
                 ; 0000 00AE     result = KEYPAD_PLS;
000198 e01c      	LDI  R17,LOW(12)
                 ; 0000 00AF 
                 ; 0000 00B0     return result;
                 _0x59:
                 _0x57:
                 _0x55:
000199 2fe1      	MOV  R30,R17
00019a 9119      	LD   R17,Y+
00019b 9508      	RET
                 ; 0000 00B1 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00019c 93aa      	ST   -Y,R26
00019d b3e5      	IN   R30,0x15
00019e 70ef      	ANDI R30,LOW(0xF)
00019f 2fae      	MOV  R26,R30
0001a0 81e8      	LD   R30,Y
0001a1 7fe0      	ANDI R30,LOW(0xF0)
0001a2 2bea      	OR   R30,R26
0001a3 bbe5      	OUT  0x15,R30
                +
0001a4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a5 958a     +DEC R24
0001a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a7 9aaa      	SBI  0x15,2
                +
0001a8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a9 958a     +DEC R24
0001aa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001ab 98aa      	CBI  0x15,2
                +
0001ac e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001ad 958a     +DEC R24
0001ae f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001af c077      	RJMP _0x20A0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001b0 93aa      	ST   -Y,R26
0001b1 81a8      	LD   R26,Y
0001b2 dfe9      	RCALL __lcd_write_nibble_G100
0001b3 81e8          ld    r30,y
0001b4 95e2          swap  r30
0001b5 83e8          st    y,r30
0001b6 81a8      	LD   R26,Y
0001b7 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001b8 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001b9 958a     +DEC R24
0001ba f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001bb c06b      	RJMP _0x20A0004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001bc 93aa      	ST   -Y,R26
0001bd 81e8      	LD   R30,Y
0001be e0f0      	LDI  R31,0
0001bf 57e8      	SUBI R30,LOW(-__base_y_G100)
0001c0 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001c1 81e0      	LD   R30,Z
0001c2 81a9      	LDD  R26,Y+1
0001c3 0fae      	ADD  R26,R30
0001c4 dfeb      	RCALL __lcd_write_data
0001c5 8049      	LDD  R4,Y+1
0001c6 8098      	LDD  R9,Y+0
0001c7 9622      	ADIW R28,2
0001c8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001c9 e0a2      	LDI  R26,LOW(2)
0001ca 940e 0380 	CALL SUBOPT_0x7
0001cc e0ac      	LDI  R26,LOW(12)
0001cd dfe2      	RCALL __lcd_write_data
0001ce e0a1      	LDI  R26,LOW(1)
0001cf 940e 0380 	CALL SUBOPT_0x7
0001d1 e0e0      	LDI  R30,LOW(0)
0001d2 2e9e      	MOV  R9,R30
0001d3 2e4e      	MOV  R4,R30
0001d4 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001d5 93aa      	ST   -Y,R26
0001d6 81a8      	LD   R26,Y
0001d7 30aa      	CPI  R26,LOW(0xA)
0001d8 f011      	BREQ _0x2000005
0001d9 1448      	CP   R4,R8
0001da f048      	BRLO _0x2000004
                 _0x2000005:
0001db e0e0      	LDI  R30,LOW(0)
0001dc 93ea      	ST   -Y,R30
0001dd 9493      	INC  R9
0001de 2da9      	MOV  R26,R9
0001df dfdc      	RCALL _lcd_gotoxy
0001e0 81a8      	LD   R26,Y
0001e1 30aa      	CPI  R26,LOW(0xA)
0001e2 f409      	BRNE _0x2000007
0001e3 c043      	RJMP _0x20A0004
                 _0x2000007:
                 _0x2000004:
0001e4 9443      	INC  R4
0001e5 9aa8      	SBI  0x15,0
0001e6 81a8      	LD   R26,Y
0001e7 dfc8      	RCALL __lcd_write_data
0001e8 98a8      	CBI  0x15,0
0001e9 c03d      	RJMP _0x20A0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001ea 93ba      	ST   -Y,R27
0001eb 93aa      	ST   -Y,R26
0001ec 931a      	ST   -Y,R17
                 _0x2000008:
0001ed 81a9      	LDD  R26,Y+1
0001ee 81ba      	LDD  R27,Y+1+1
0001ef 91ed      	LD   R30,X+
0001f0 83a9      	STD  Y+1,R26
0001f1 83ba      	STD  Y+1+1,R27
0001f2 2f1e      	MOV  R17,R30
0001f3 30e0      	CPI  R30,0
0001f4 f019      	BREQ _0x200000A
0001f5 2fa1      	MOV  R26,R17
0001f6 dfde      	RCALL _lcd_putchar
0001f7 cff5      	RJMP _0x2000008
                 _0x200000A:
0001f8 8118      	LDD  R17,Y+0
0001f9 9623      	ADIW R28,3
0001fa 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001fb 93aa      	ST   -Y,R26
0001fc b3e4      	IN   R30,0x14
0001fd 6fe0      	ORI  R30,LOW(0xF0)
0001fe bbe4      	OUT  0x14,R30
0001ff 9aa2      	SBI  0x14,2
000200 9aa0      	SBI  0x14,0
000201 9aa1      	SBI  0x14,1
000202 98aa      	CBI  0x15,2
000203 98a8      	CBI  0x15,0
000204 98a9      	CBI  0x15,1
000205 8088      	LDD  R8,Y+0
000206 81e8      	LD   R30,Y
000207 58e0      	SUBI R30,-LOW(128)
                +
000208 93e0 028a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00020a 81e8      	LD   R30,Y
00020b 54e0      	SUBI R30,-LOW(192)
                +
00020c 93e0 028b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00020e e1a4      	LDI  R26,LOW(20)
00020f e0b0      	LDI  R27,0
000210 940e 03c5 	CALL _delay_ms
000212 940e 0386 	CALL SUBOPT_0x8
000214 940e 0386 	CALL SUBOPT_0x8
000216 940e 0386 	CALL SUBOPT_0x8
000218 e2a0      	LDI  R26,LOW(32)
000219 df82      	RCALL __lcd_write_nibble_G100
                +
00021a ec88     +LDI R24 , LOW ( 200 )
00021b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00021c 9701     +SBIW R24 , 1
00021d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00021e e2a8      	LDI  R26,LOW(40)
00021f df90      	RCALL __lcd_write_data
000220 e0a4      	LDI  R26,LOW(4)
000221 df8e      	RCALL __lcd_write_data
000222 e8a5      	LDI  R26,LOW(133)
000223 df8c      	RCALL __lcd_write_data
000224 e0a6      	LDI  R26,LOW(6)
000225 df8a      	RCALL __lcd_write_data
000226 dfa2      	RCALL _lcd_clear
                 _0x20A0004:
000227 9621      	ADIW R28,1
000228 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
000229 93ba      	ST   -Y,R27
00022a 93aa      	ST   -Y,R26
00022b 9724      	SBIW R28,4
00022c e0e0      	LDI  R30,LOW(0)
00022d 83e8      	ST   Y,R30
00022e 83e9      	STD  Y+1,R30
00022f 83ea      	STD  Y+2,R30
000230 e3ef      	LDI  R30,LOW(63)
000231 83eb      	STD  Y+3,R30
000232 931a      	ST   -Y,R17
000233 930a      	ST   -Y,R16
000234 85eb      	LDD  R30,Y+11
000235 85fc      	LDD  R31,Y+11+1
000236 3fef      	CPI  R30,LOW(0xFFFF)
000237 efaf      	LDI  R26,HIGH(0xFFFF)
000238 07fa      	CPC  R31,R26
000239 f439      	BRNE _0x202000D
00023a 940e 038e 	CALL SUBOPT_0x9
                +
00023c e7a2     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
00023d e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
00023e 940e 033e 	CALL _strcpyf
000240 c0b1      	RJMP _0x20A0003
                 _0x202000D:
000241 3fef      	CPI  R30,LOW(0x7FFF)
000242 e7af      	LDI  R26,HIGH(0x7FFF)
000243 07fa      	CPC  R31,R26
000244 f439      	BRNE _0x202000C
000245 940e 038e 	CALL SUBOPT_0x9
                +
000247 e7a3     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
000248 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
000249 940e 033e 	CALL _strcpyf
00024b c0a6      	RJMP _0x20A0003
                 _0x202000C:
00024c 85ac      	LDD  R26,Y+12
00024d 23aa      	TST  R26
00024e f462      	BRPL _0x202000F
                +
00024f 85e9     +LDD R30 , Y + 9
000250 85fa     +LDD R31 , Y + 9 + 1
000251 856b     +LDD R22 , Y + 9 + 2
000252 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000253 940e 03cf 	CALL __ANEGF1
000255 940e 0393 	CALL SUBOPT_0xA
000257 940e 0398 	CALL SUBOPT_0xB
000259 e2ed      	LDI  R30,LOW(45)
00025a 93ec      	ST   X,R30
                 _0x202000F:
00025b 85a8      	LDD  R26,Y+8
00025c 30a7      	CPI  R26,LOW(0x7)
00025d f010      	BRLO _0x2020010
00025e e0e6      	LDI  R30,LOW(6)
00025f 87e8      	STD  Y+8,R30
                 _0x2020010:
000260 8518      	LDD  R17,Y+8
                 _0x2020011:
000261 2fe1      	MOV  R30,R17
000262 5011      	SUBI R17,1
000263 30e0      	CPI  R30,0
000264 f039      	BREQ _0x2020013
000265 940e 039f 	CALL SUBOPT_0xC
000267 940e 03a4 	CALL SUBOPT_0xD
000269 940e 03ab 	CALL SUBOPT_0xE
00026b cff5      	RJMP _0x2020011
                 _0x2020013:
00026c 940e 03b0 	CALL SUBOPT_0xF
00026e 940e 0475 	CALL __ADDF12
000270 940e 0393 	CALL SUBOPT_0xA
000272 e010      	LDI  R17,LOW(0)
                +
000273 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000274 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000275 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000276 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000277 940e 03ab 	CALL SUBOPT_0xE
                 _0x2020014:
000279 940e 03b0 	CALL SUBOPT_0xF
00027b 940e 0558 	CALL __CMPF12
00027d f088      	BRLO _0x2020016
00027e 940e 039f 	CALL SUBOPT_0xC
000280 940e 03b9 	CALL SUBOPT_0x10
000282 940e 03ab 	CALL SUBOPT_0xE
000284 5f1f      	SUBI R17,-LOW(1)
000285 3217      	CPI  R17,39
000286 f038      	BRLO _0x2020017
000287 940e 038e 	CALL SUBOPT_0x9
                +
000289 e7a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 5 ) )
00028a e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 5 ) )
                 	__POINTW2FN _0x2020000,5
00028b 940e 033e 	CALL _strcpyf
00028d c064      	RJMP _0x20A0003
                 _0x2020017:
00028e cfea      	RJMP _0x2020014
                 _0x2020016:
00028f 3010      	CPI  R17,0
000290 f429      	BRNE _0x2020018
000291 940e 0398 	CALL SUBOPT_0xB
000293 e3e0      	LDI  R30,LOW(48)
000294 93ec      	ST   X,R30
000295 c02f      	RJMP _0x2020019
                 _0x2020018:
                 _0x202001A:
000296 2fe1      	MOV  R30,R17
000297 5011      	SUBI R17,1
000298 30e0      	CPI  R30,0
000299 f159      	BREQ _0x202001C
00029a 940e 039f 	CALL SUBOPT_0xC
00029c 940e 03a4 	CALL SUBOPT_0xD
                +
00029e e0a0     +LDI R26 , LOW ( 0x3F000000 )
00029f e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0002a0 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0002a1 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0002a2 940e 0475 	CALL __ADDF12
0002a4 01df      	MOVW R26,R30
0002a5 01cb      	MOVW R24,R22
0002a6 940e 0327 	CALL _floor
0002a8 940e 03ab 	CALL SUBOPT_0xE
0002aa 940e 03b0 	CALL SUBOPT_0xF
0002ac 940e 0513 	CALL __DIVF21
0002ae 940e 0402 	CALL __CFD1U
0002b0 2f0e      	MOV  R16,R30
0002b1 940e 0398 	CALL SUBOPT_0xB
0002b3 2fe0      	MOV  R30,R16
0002b4 5de0      	SUBI R30,-LOW(48)
0002b5 93ec      	ST   X,R30
0002b6 2fe0      	MOV  R30,R16
0002b7 e0f0      	LDI  R31,0
0002b8 940e 039f 	CALL SUBOPT_0xC
0002ba 940e 0375 	CALL SUBOPT_0x5
0002bc 940e 04c5 	CALL __MULF12
0002be 940e 03c0 	CALL SUBOPT_0x11
0002c0 940e 0361 	CALL SUBOPT_0x2
0002c2 940e 0393 	CALL SUBOPT_0xA
0002c4 cfd1      	RJMP _0x202001A
                 _0x202001C:
                 _0x2020019:
0002c5 85e8      	LDD  R30,Y+8
0002c6 30e0      	CPI  R30,0
0002c7 f131      	BREQ _0x20A0002
0002c8 940e 0398 	CALL SUBOPT_0xB
0002ca e2ee      	LDI  R30,LOW(46)
0002cb 93ec      	ST   X,R30
                 _0x202001E:
0002cc 85e8      	LDD  R30,Y+8
0002cd 50e1      	SUBI R30,LOW(1)
0002ce 87e8      	STD  Y+8,R30
0002cf 5fef      	SUBI R30,-LOW(1)
0002d0 f0e9      	BREQ _0x2020020
0002d1 940e 03c0 	CALL SUBOPT_0x11
0002d3 940e 03b9 	CALL SUBOPT_0x10
0002d5 940e 0393 	CALL SUBOPT_0xA
                +
0002d7 85e9     +LDD R30 , Y + 9
0002d8 85fa     +LDD R31 , Y + 9 + 1
0002d9 856b     +LDD R22 , Y + 9 + 2
0002da 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0002db 940e 0402 	CALL __CFD1U
0002dd 2f0e      	MOV  R16,R30
0002de 940e 0398 	CALL SUBOPT_0xB
0002e0 2fe0      	MOV  R30,R16
0002e1 5de0      	SUBI R30,-LOW(48)
0002e2 93ec      	ST   X,R30
0002e3 2fe0      	MOV  R30,R16
0002e4 e0f0      	LDI  R31,0
0002e5 940e 03c0 	CALL SUBOPT_0x11
0002e7 940e 0375 	CALL SUBOPT_0x5
0002e9 940e 0361 	CALL SUBOPT_0x2
0002eb 940e 0393 	CALL SUBOPT_0xA
0002ed cfde      	RJMP _0x202001E
                 _0x2020020:
                 _0x20A0002:
0002ee 81ae      	LDD  R26,Y+6
0002ef 81bf      	LDD  R27,Y+6+1
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 93ec      	ST   X,R30
                 _0x20A0003:
0002f2 8119      	LDD  R17,Y+1
0002f3 8108      	LDD  R16,Y+0
0002f4 962d      	ADIW R28,13
0002f5 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0002f6 940e 05ae 	CALL __PUTPARD2
0002f8 817b         ldd  r23,y+3
0002f9 816a         ldd  r22,y+2
0002fa 81f9         ldd  r31,y+1
0002fb 81e8         ld   r30,y
0002fc fb77         bst  r23,7
0002fd 0f77         lsl  r23
0002fe fd67         sbrc r22,7
0002ff 6071         sbr  r23,1
000300 2f97         mov  r25,r23
000301 579e         subi r25,0x7e
000302 f081         breq __ftrunc0
000303 f078         brcs __ftrunc0
000304 3198         cpi  r25,24
000305 f490         brsh __ftrunc1
000306 27aa         clr  r26
000307 27bb         clr  r27
000308 2788         clr  r24
                 __ftrunc2:
000309 9408         sec
00030a 9587         ror  r24
00030b 95b7         ror  r27
00030c 95a7         ror  r26
00030d 959a         dec  r25
00030e f7d1         brne __ftrunc2
00030f 23ea         and  r30,r26
000310 23fb         and  r31,r27
000311 2368         and  r22,r24
000312 c005         rjmp __ftrunc1
                 __ftrunc0:
000313 94e8         clt
000314 2777         clr  r23
000315 27ee         clr  r30
000316 27ff         clr  r31
000317 2766         clr  r22
                 __ftrunc1:
000318 776f         cbr  r22,0x80
000319 9576         lsr  r23
00031a f408         brcc __ftrunc3
00031b 6860         sbr  r22,0x80
                 __ftrunc3:
00031c f977         bld  r23,7
00031d 91a9         ld   r26,y+
00031e 91b9         ld   r27,y+
00031f 9189         ld   r24,y+
000320 9199         ld   r25,y+
000321 17ea         cp   r30,r26
000322 07fb         cpc  r31,r27
000323 0768         cpc  r22,r24
000324 0779         cpc  r23,r25
000325 fb97         bst  r25,7
000326 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000327 940e 05ae 	CALL __PUTPARD2
000329 940e 059a 	CALL __GETD2S0
00032b 940e 02f6 	CALL _ftrunc
00032d 940e 059f 	CALL __PUTD1S0
00032f f419          brne __floor1
                 __floor0:
000330 940e 0595 	CALL __GETD1S0
000332 c009      	RJMP _0x20A0001
                 __floor1:
000333 f7e6          brtc __floor0
000334 940e 0595 	CALL __GETD1S0
                +
000336 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000337 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000338 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000339 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00033a 940e 046e 	CALL __SUBF12
                 _0x20A0001:
00033c 9624      	ADIW R28,4
00033d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
00033e 93ba      	ST   -Y,R27
00033f 93aa      	ST   -Y,R26
000340 91e9          ld   r30,y+
000341 91f9          ld   r31,y+
000342 91a9          ld   r26,y+
000343 91b9          ld   r27,y+
000344 01cd          movw r24,r26
                 strcpyf0:
000345 9005      	lpm  r0,z+
000346 920d          st   x+,r0
000347 2000          tst  r0
000348 f7e1          brne strcpyf0
000349 01fc          movw r30,r24
00034a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _show_arr:
000277           	.BYTE 0x5
                 _op_arr:
00027c           	.BYTE 0xC
                 __base_y_G100:
000288           	.BYTE 0x4
                 __seed_G101:
00028c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00034b 2e5e      	MOV  R5,R30
00034c 01f3      	MOVW R30,R6
00034d 9631      	ADIW R30,1
00034e 013f      	MOVW R6,R30
00034f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x1:
                +
000350 91e0 0280+LDS R30 , _op_arr + ( 4 )
000352 91f0 0281+LDS R31 , _op_arr + ( 4 ) + 1
000354 9160 0282+LDS R22 , _op_arr + ( 4 ) + 2
000356 9170 0283+LDS R23 , _op_arr + ( 4 ) + 3
                 	__GETD1MN _op_arr,4
000358 91a0 027c 	LDS  R26,_op_arr
00035a 91b0 027d 	LDS  R27,_op_arr+1
00035c 9180 027e 	LDS  R24,_op_arr+2
00035e 9190 027f 	LDS  R25,_op_arr+3
000360 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000361 940e 05b3 	CALL __SWAPD12
000363 940e 046e 	CALL __SUBF12
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
                +
000366 e0a0     +LDI R26 , LOW ( 0x0 )
000367 e0b0     +LDI R27 , HIGH ( 0x0 )
000368 e080     +LDI R24 , BYTE3 ( 0x0 )
000369 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
00036a 940e 05a4 	CALL __PUTDZ20
00036c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00036d 01f3      	MOVW R30,R6
00036e e7ac      	LDI  R26,LOW(_op_arr)
00036f e0b2      	LDI  R27,HIGH(_op_arr)
000370 940e 0580 	CALL __LSLW2
000372 0fea      	ADD  R30,R26
000373 1ffb      	ADC  R31,R27
000374 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000375 940e 0585 	CALL __CWD1
000377 940e 043b 	CALL __CDF1
000379 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00037a 9892      	CBI  0x12,2
00037b 9893      	CBI  0x12,3
00037c e0a5      	LDI  R26,LOW(5)
00037d e0b0      	LDI  R27,0
00037e 940c 03c5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000380 940e 01b0 	CALL __lcd_write_data
000382 e0a3      	LDI  R26,LOW(3)
000383 e0b0      	LDI  R27,0
000384 940c 03c5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000386 e3a0      	LDI  R26,LOW(48)
000387 940e 019c 	CALL __lcd_write_nibble_G100
                +
000389 ec88     +LDI R24 , LOW ( 200 )
00038a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00038b 9701     +SBIW R24 , 1
00038c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00038d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00038e 81ee      	LDD  R30,Y+6
00038f 81ff      	LDD  R31,Y+6+1
000390 93fa      	ST   -Y,R31
000391 93ea      	ST   -Y,R30
000392 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
                +
000393 87e9     +STD Y + 9 , R30
000394 87fa     +STD Y + 9 + 1 , R31
000395 876b     +STD Y + 9 + 2 , R22
000396 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB:
000398 81ae      	LDD  R26,Y+6
000399 81bf      	LDD  R27,Y+6+1
00039a 9611      	ADIW R26,1
00039b 83ae      	STD  Y+6,R26
00039c 83bf      	STD  Y+6+1,R27
00039d 9711      	SBIW R26,1
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
                +
00039f 81aa     +LDD R26 , Y + 2
0003a0 81bb     +LDD R27 , Y + 2 + 1
0003a1 818c     +LDD R24 , Y + 2 + 2
0003a2 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0003a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
                +
0003a4 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0003a5 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0003a6 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0003a7 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0003a8 940e 04c5 	CALL __MULF12
0003aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
                +
0003ab 83ea     +STD Y + 2 , R30
0003ac 83fb     +STD Y + 2 + 1 , R31
0003ad 836c     +STD Y + 2 + 2 , R22
0003ae 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0003af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
                +
0003b0 81ea     +LDD R30 , Y + 2
0003b1 81fb     +LDD R31 , Y + 2 + 1
0003b2 816c     +LDD R22 , Y + 2 + 2
0003b3 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0003b4 85a9     +LDD R26 , Y + 9
0003b5 85ba     +LDD R27 , Y + 9 + 1
0003b6 858b     +LDD R24 , Y + 9 + 2
0003b7 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0003b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
0003b9 e0e0     +LDI R30 , LOW ( 0x41200000 )
0003ba e0f0     +LDI R31 , HIGH ( 0x41200000 )
0003bb e260     +LDI R22 , BYTE3 ( 0x41200000 )
0003bc e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0003bd 940e 04c5 	CALL __MULF12
0003bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
0003c0 85a9     +LDD R26 , Y + 9
0003c1 85ba     +LDD R27 , Y + 9 + 1
0003c2 858b     +LDD R24 , Y + 9 + 2
0003c3 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0003c4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003c5 9610      	adiw r26,0
0003c6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003c7 ed80     +LDI R24 , LOW ( 0x7D0 )
0003c8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003c9 9701     +SBIW R24 , 1
0003ca f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003cb 95a8      	wdr
0003cc 9711      	sbiw r26,1
0003cd f7c9      	brne __delay_ms0
                 __delay_ms1:
0003ce 9508      	ret
                 
                 __ANEGF1:
0003cf 9730      	SBIW R30,0
0003d0 4060      	SBCI R22,0
0003d1 4070      	SBCI R23,0
0003d2 f009      	BREQ __ANEGF10
0003d3 5870      	SUBI R23,0x80
                 __ANEGF10:
0003d4 9508      	RET
                 
                 __ROUND_REPACK:
0003d5 2355      	TST  R21
0003d6 f442      	BRPL __REPACK
0003d7 3850      	CPI  R21,0x80
0003d8 f411      	BRNE __ROUND_REPACK0
0003d9 ffe0      	SBRS R30,0
0003da c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003db 9631      	ADIW R30,1
0003dc 1f69      	ADC  R22,R25
0003dd 1f79      	ADC  R23,R25
0003de f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003df e850      	LDI  R21,0x80
0003e0 2757      	EOR  R21,R23
0003e1 f411      	BRNE __REPACK0
0003e2 935f      	PUSH R21
0003e3 c0cf      	RJMP __ZERORES
                 __REPACK0:
0003e4 3f5f      	CPI  R21,0xFF
0003e5 f031      	BREQ __REPACK1
0003e6 0f66      	LSL  R22
0003e7 0c00      	LSL  R0
0003e8 9557      	ROR  R21
0003e9 9567      	ROR  R22
0003ea 2f75      	MOV  R23,R21
0003eb 9508      	RET
                 __REPACK1:
0003ec 935f      	PUSH R21
0003ed 2000      	TST  R0
0003ee f00a      	BRMI __REPACK2
0003ef c0cf      	RJMP __MAXRES
                 __REPACK2:
0003f0 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0003f1 e850      	LDI  R21,0x80
0003f2 2e19      	MOV  R1,R25
0003f3 2215      	AND  R1,R21
0003f4 0f88      	LSL  R24
0003f5 1f99      	ROL  R25
0003f6 2795      	EOR  R25,R21
0003f7 0f55      	LSL  R21
0003f8 9587      	ROR  R24
                 
                 __UNPACK1:
0003f9 e850      	LDI  R21,0x80
0003fa 2e07      	MOV  R0,R23
0003fb 2205      	AND  R0,R21
0003fc 0f66      	LSL  R22
0003fd 1f77      	ROL  R23
0003fe 2775      	EOR  R23,R21
0003ff 0f55      	LSL  R21
000400 9567      	ROR  R22
000401 9508      	RET
                 
                 __CFD1U:
000402 9468      	SET
000403 c001      	RJMP __CFD1U0
                 __CFD1:
000404 94e8      	CLT
                 __CFD1U0:
000405 935f      	PUSH R21
000406 dff2      	RCALL __UNPACK1
000407 3870      	CPI  R23,0x80
000408 f018      	BRLO __CFD10
000409 3f7f      	CPI  R23,0xFF
00040a f408      	BRCC __CFD10
00040b c0a7      	RJMP __ZERORES
                 __CFD10:
00040c e156      	LDI  R21,22
00040d 1b57      	SUB  R21,R23
00040e f4aa      	BRPL __CFD11
00040f 9551      	NEG  R21
000410 3058      	CPI  R21,8
000411 f40e      	BRTC __CFD19
000412 3059      	CPI  R21,9
                 __CFD19:
000413 f030      	BRLO __CFD17
000414 efef      	SER  R30
000415 efff      	SER  R31
000416 ef6f      	SER  R22
000417 e77f      	LDI  R23,0x7F
000418 f977      	BLD  R23,7
000419 c01a      	RJMP __CFD15
                 __CFD17:
00041a 2777      	CLR  R23
00041b 2355      	TST  R21
00041c f0b9      	BREQ __CFD15
                 __CFD18:
00041d 0fee      	LSL  R30
00041e 1fff      	ROL  R31
00041f 1f66      	ROL  R22
000420 1f77      	ROL  R23
000421 955a      	DEC  R21
000422 f7d1      	BRNE __CFD18
000423 c010      	RJMP __CFD15
                 __CFD11:
000424 2777      	CLR  R23
                 __CFD12:
000425 3058      	CPI  R21,8
000426 f028      	BRLO __CFD13
000427 2fef      	MOV  R30,R31
000428 2ff6      	MOV  R31,R22
000429 2f67      	MOV  R22,R23
00042a 5058      	SUBI R21,8
00042b cff9      	RJMP __CFD12
                 __CFD13:
00042c 2355      	TST  R21
00042d f031      	BREQ __CFD15
                 __CFD14:
00042e 9576      	LSR  R23
00042f 9567      	ROR  R22
000430 95f7      	ROR  R31
000431 95e7      	ROR  R30
000432 955a      	DEC  R21
000433 f7d1      	BRNE __CFD14
                 __CFD15:
000434 2000      	TST  R0
000435 f40a      	BRPL __CFD16
000436 d141      	RCALL __ANEGD1
                 __CFD16:
000437 915f      	POP  R21
000438 9508      	RET
                 
                 __CDF1U:
000439 9468      	SET
00043a c001      	RJMP __CDF1U0
                 __CDF1:
00043b 94e8      	CLT
                 __CDF1U0:
00043c 9730      	SBIW R30,0
00043d 4060      	SBCI R22,0
00043e 4070      	SBCI R23,0
00043f f0b1      	BREQ __CDF10
000440 2400      	CLR  R0
000441 f026      	BRTS __CDF11
000442 2377      	TST  R23
000443 f412      	BRPL __CDF11
000444 9400      	COM  R0
000445 d132      	RCALL __ANEGD1
                 __CDF11:
000446 2e17      	MOV  R1,R23
000447 e17e      	LDI  R23,30
000448 2011      	TST  R1
                 __CDF12:
000449 f032      	BRMI __CDF13
00044a 957a      	DEC  R23
00044b 0fee      	LSL  R30
00044c 1fff      	ROL  R31
00044d 1f66      	ROL  R22
00044e 1c11      	ROL  R1
00044f cff9      	RJMP __CDF12
                 __CDF13:
000450 2fef      	MOV  R30,R31
000451 2ff6      	MOV  R31,R22
000452 2d61      	MOV  R22,R1
000453 935f      	PUSH R21
000454 df8a      	RCALL __REPACK
000455 915f      	POP  R21
                 __CDF10:
000456 9508      	RET
                 
                 __SWAPACC:
000457 934f      	PUSH R20
000458 01af      	MOVW R20,R30
000459 01fd      	MOVW R30,R26
00045a 01da      	MOVW R26,R20
00045b 01ab      	MOVW R20,R22
00045c 01bc      	MOVW R22,R24
00045d 01ca      	MOVW R24,R20
00045e 2d40      	MOV  R20,R0
00045f 2c01      	MOV  R0,R1
000460 2e14      	MOV  R1,R20
000461 914f      	POP  R20
000462 9508      	RET
                 
                 __UADD12:
000463 0fea      	ADD  R30,R26
000464 1ffb      	ADC  R31,R27
000465 1f68      	ADC  R22,R24
000466 9508      	RET
                 
                 __NEGMAN1:
000467 95e0      	COM  R30
000468 95f0      	COM  R31
000469 9560      	COM  R22
00046a 5fef      	SUBI R30,-1
00046b 4fff      	SBCI R31,-1
00046c 4f6f      	SBCI R22,-1
00046d 9508      	RET
                 
                 __SUBF12:
00046e 935f      	PUSH R21
00046f df81      	RCALL __UNPACK
000470 3890      	CPI  R25,0x80
000471 f171      	BREQ __ADDF129
000472 e850      	LDI  R21,0x80
000473 2615      	EOR  R1,R21
                 
000474 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000475 935f      	PUSH R21
000476 df7a      	RCALL __UNPACK
000477 3890      	CPI  R25,0x80
000478 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000479 3870      	CPI  R23,0x80
00047a f121      	BREQ __ADDF128
                 __ADDF121:
00047b 2f57      	MOV  R21,R23
00047c 1b59      	SUB  R21,R25
00047d f12b      	BRVS __ADDF1211
00047e f412      	BRPL __ADDF122
00047f dfd7      	RCALL __SWAPACC
000480 cffa      	RJMP __ADDF121
                 __ADDF122:
000481 3158      	CPI  R21,24
000482 f018      	BRLO __ADDF123
000483 27aa      	CLR  R26
000484 27bb      	CLR  R27
000485 2788      	CLR  R24
                 __ADDF123:
000486 3058      	CPI  R21,8
000487 f028      	BRLO __ADDF124
000488 2fab      	MOV  R26,R27
000489 2fb8      	MOV  R27,R24
00048a 2788      	CLR  R24
00048b 5058      	SUBI R21,8
00048c cff9      	RJMP __ADDF123
                 __ADDF124:
00048d 2355      	TST  R21
00048e f029      	BREQ __ADDF126
                 __ADDF125:
00048f 9586      	LSR  R24
000490 95b7      	ROR  R27
000491 95a7      	ROR  R26
000492 955a      	DEC  R21
000493 f7d9      	BRNE __ADDF125
                 __ADDF126:
000494 2d50      	MOV  R21,R0
000495 2551      	EOR  R21,R1
000496 f072      	BRMI __ADDF127
000497 dfcb      	RCALL __UADD12
000498 f438      	BRCC __ADDF129
000499 9567      	ROR  R22
00049a 95f7      	ROR  R31
00049b 95e7      	ROR  R30
00049c 9573      	INC  R23
00049d f413      	BRVC __ADDF129
00049e c020      	RJMP __MAXRES
                 __ADDF128:
00049f dfb7      	RCALL __SWAPACC
                 __ADDF129:
0004a0 df3e      	RCALL __REPACK
0004a1 915f      	POP  R21
0004a2 9508      	RET
                 __ADDF1211:
0004a3 f7d8      	BRCC __ADDF128
0004a4 cffb      	RJMP __ADDF129
                 __ADDF127:
0004a5 1bea      	SUB  R30,R26
0004a6 0bfb      	SBC  R31,R27
0004a7 0b68      	SBC  R22,R24
0004a8 f051      	BREQ __ZERORES
0004a9 f410      	BRCC __ADDF1210
0004aa 9400      	COM  R0
0004ab dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0004ac 2366      	TST  R22
0004ad f392      	BRMI __ADDF129
0004ae 0fee      	LSL  R30
0004af 1fff      	ROL  R31
0004b0 1f66      	ROL  R22
0004b1 957a      	DEC  R23
0004b2 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0004b3 27ee      	CLR  R30
0004b4 27ff      	CLR  R31
0004b5 2766      	CLR  R22
0004b6 2777      	CLR  R23
0004b7 915f      	POP  R21
0004b8 9508      	RET
                 
                 __MINRES:
0004b9 efef      	SER  R30
0004ba efff      	SER  R31
0004bb e76f      	LDI  R22,0x7F
0004bc ef7f      	SER  R23
0004bd 915f      	POP  R21
0004be 9508      	RET
                 
                 __MAXRES:
0004bf efef      	SER  R30
0004c0 efff      	SER  R31
0004c1 e76f      	LDI  R22,0x7F
0004c2 e77f      	LDI  R23,0x7F
0004c3 915f      	POP  R21
0004c4 9508      	RET
                 
                 __MULF12:
0004c5 935f      	PUSH R21
0004c6 df2a      	RCALL __UNPACK
0004c7 3870      	CPI  R23,0x80
0004c8 f351      	BREQ __ZERORES
0004c9 3890      	CPI  R25,0x80
0004ca f341      	BREQ __ZERORES
0004cb 2401      	EOR  R0,R1
0004cc 9408      	SEC
0004cd 1f79      	ADC  R23,R25
0004ce f423      	BRVC __MULF124
0004cf f31c      	BRLT __ZERORES
                 __MULF125:
0004d0 2000      	TST  R0
0004d1 f33a      	BRMI __MINRES
0004d2 cfec      	RJMP __MAXRES
                 __MULF124:
0004d3 920f      	PUSH R0
0004d4 931f      	PUSH R17
0004d5 932f      	PUSH R18
0004d6 933f      	PUSH R19
0004d7 934f      	PUSH R20
0004d8 2711      	CLR  R17
0004d9 2722      	CLR  R18
0004da 2799      	CLR  R25
0004db 9f68      	MUL  R22,R24
0004dc 01a0      	MOVW R20,R0
0004dd 9f8f      	MUL  R24,R31
0004de 2d30      	MOV  R19,R0
0004df 0d41      	ADD  R20,R1
0004e0 1f59      	ADC  R21,R25
0004e1 9f6b      	MUL  R22,R27
0004e2 0d30      	ADD  R19,R0
0004e3 1d41      	ADC  R20,R1
0004e4 1f59      	ADC  R21,R25
0004e5 9f8e      	MUL  R24,R30
0004e6 d027      	RCALL __MULF126
0004e7 9fbf      	MUL  R27,R31
0004e8 d025      	RCALL __MULF126
0004e9 9f6a      	MUL  R22,R26
0004ea d023      	RCALL __MULF126
0004eb 9fbe      	MUL  R27,R30
0004ec d01d      	RCALL __MULF127
0004ed 9faf      	MUL  R26,R31
0004ee d01b      	RCALL __MULF127
0004ef 9fae      	MUL  R26,R30
0004f0 0d11      	ADD  R17,R1
0004f1 1f29      	ADC  R18,R25
0004f2 1f39      	ADC  R19,R25
0004f3 1f49      	ADC  R20,R25
0004f4 1f59      	ADC  R21,R25
0004f5 2fe3      	MOV  R30,R19
0004f6 2ff4      	MOV  R31,R20
0004f7 2f65      	MOV  R22,R21
0004f8 2f52      	MOV  R21,R18
0004f9 914f      	POP  R20
0004fa 913f      	POP  R19
0004fb 912f      	POP  R18
0004fc 911f      	POP  R17
0004fd 900f      	POP  R0
0004fe 2366      	TST  R22
0004ff f02a      	BRMI __MULF122
000500 0f55      	LSL  R21
000501 1fee      	ROL  R30
000502 1fff      	ROL  R31
000503 1f66      	ROL  R22
000504 c002      	RJMP __MULF123
                 __MULF122:
000505 9573      	INC  R23
000506 f24b      	BRVS __MULF125
                 __MULF123:
000507 decd      	RCALL __ROUND_REPACK
000508 915f      	POP  R21
000509 9508      	RET
                 
                 __MULF127:
00050a 0d10      	ADD  R17,R0
00050b 1d21      	ADC  R18,R1
00050c 1f39      	ADC  R19,R25
00050d c002      	RJMP __MULF128
                 __MULF126:
00050e 0d20      	ADD  R18,R0
00050f 1d31      	ADC  R19,R1
                 __MULF128:
000510 1f49      	ADC  R20,R25
000511 1f59      	ADC  R21,R25
000512 9508      	RET
                 
                 __DIVF21:
000513 935f      	PUSH R21
000514 dedc      	RCALL __UNPACK
000515 3870      	CPI  R23,0x80
000516 f421      	BRNE __DIVF210
000517 2011      	TST  R1
                 __DIVF211:
000518 f40a      	BRPL __DIVF219
000519 cf9f      	RJMP __MINRES
                 __DIVF219:
00051a cfa4      	RJMP __MAXRES
                 __DIVF210:
00051b 3890      	CPI  R25,0x80
00051c f409      	BRNE __DIVF218
                 __DIVF217:
00051d cf95      	RJMP __ZERORES
                 __DIVF218:
00051e 2401      	EOR  R0,R1
00051f 9408      	SEC
000520 0b97      	SBC  R25,R23
000521 f41b      	BRVC __DIVF216
000522 f3d4      	BRLT __DIVF217
000523 2000      	TST  R0
000524 cff3      	RJMP __DIVF211
                 __DIVF216:
000525 2f79      	MOV  R23,R25
000526 931f      	PUSH R17
000527 932f      	PUSH R18
000528 933f      	PUSH R19
000529 934f      	PUSH R20
00052a 2411      	CLR  R1
00052b 2711      	CLR  R17
00052c 2722      	CLR  R18
00052d 2733      	CLR  R19
00052e 2744      	CLR  R20
00052f 2755      	CLR  R21
000530 e290      	LDI  R25,32
                 __DIVF212:
000531 17ae      	CP   R26,R30
000532 07bf      	CPC  R27,R31
000533 0786      	CPC  R24,R22
000534 0741      	CPC  R20,R17
000535 f030      	BRLO __DIVF213
000536 1bae      	SUB  R26,R30
000537 0bbf      	SBC  R27,R31
000538 0b86      	SBC  R24,R22
000539 0b41      	SBC  R20,R17
00053a 9408      	SEC
00053b c001      	RJMP __DIVF214
                 __DIVF213:
00053c 9488      	CLC
                 __DIVF214:
00053d 1f55      	ROL  R21
00053e 1f22      	ROL  R18
00053f 1f33      	ROL  R19
000540 1c11      	ROL  R1
000541 1faa      	ROL  R26
000542 1fbb      	ROL  R27
000543 1f88      	ROL  R24
000544 1f44      	ROL  R20
000545 959a      	DEC  R25
000546 f751      	BRNE __DIVF212
000547 01f9      	MOVW R30,R18
000548 2d61      	MOV  R22,R1
000549 914f      	POP  R20
00054a 913f      	POP  R19
00054b 912f      	POP  R18
00054c 911f      	POP  R17
00054d 2366      	TST  R22
00054e f032      	BRMI __DIVF215
00054f 0f55      	LSL  R21
000550 1fee      	ROL  R30
000551 1fff      	ROL  R31
000552 1f66      	ROL  R22
000553 957a      	DEC  R23
000554 f243      	BRVS __DIVF217
                 __DIVF215:
000555 de7f      	RCALL __ROUND_REPACK
000556 915f      	POP  R21
000557 9508      	RET
                 
                 __CMPF12:
000558 2399      	TST  R25
000559 f09a      	BRMI __CMPF120
00055a 2377      	TST  R23
00055b f042      	BRMI __CMPF121
00055c 1797      	CP   R25,R23
00055d f048      	BRLO __CMPF122
00055e f429      	BRNE __CMPF121
00055f 17ae      	CP   R26,R30
000560 07bf      	CPC  R27,R31
000561 0786      	CPC  R24,R22
000562 f020      	BRLO __CMPF122
000563 f031      	BREQ __CMPF123
                 __CMPF121:
000564 9498      	CLZ
000565 9488      	CLC
000566 9508      	RET
                 __CMPF122:
000567 9498      	CLZ
000568 9408      	SEC
000569 9508      	RET
                 __CMPF123:
00056a 9418      	SEZ
00056b 9488      	CLC
00056c 9508      	RET
                 __CMPF120:
00056d 2377      	TST  R23
00056e f7c2      	BRPL __CMPF122
00056f 1797      	CP   R25,R23
000570 f398      	BRLO __CMPF121
000571 f7a9      	BRNE __CMPF122
000572 17ea      	CP   R30,R26
000573 07fb      	CPC  R31,R27
000574 0768      	CPC  R22,R24
000575 f388      	BRLO __CMPF122
000576 f399      	BREQ __CMPF123
000577 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000578 95f0      	COM  R31
000579 9560      	COM  R22
00057a 9570      	COM  R23
00057b 95e1      	NEG  R30
00057c 4fff      	SBCI R31,-1
00057d 4f6f      	SBCI R22,-1
00057e 4f7f      	SBCI R23,-1
00057f 9508      	RET
                 
                 __LSLW2:
000580 0fee      	LSL  R30
000581 1fff      	ROL  R31
000582 0fee      	LSL  R30
000583 1fff      	ROL  R31
000584 9508      	RET
                 
                 __CWD1:
000585 2f6f      	MOV  R22,R31
000586 0f66      	ADD  R22,R22
000587 0b66      	SBC  R22,R22
000588 2f76      	MOV  R23,R22
000589 9508      	RET
                 
                 __GETD1P:
00058a 91ed      	LD   R30,X+
00058b 91fd      	LD   R31,X+
00058c 916d      	LD   R22,X+
00058d 917c      	LD   R23,X
00058e 9713      	SBIW R26,3
00058f 9508      	RET
                 
                 __PUTDP1:
000590 93ed      	ST   X+,R30
000591 93fd      	ST   X+,R31
000592 936d      	ST   X+,R22
000593 937c      	ST   X,R23
000594 9508      	RET
                 
                 __GETD1S0:
000595 81e8      	LD   R30,Y
000596 81f9      	LDD  R31,Y+1
000597 816a      	LDD  R22,Y+2
000598 817b      	LDD  R23,Y+3
000599 9508      	RET
                 
                 __GETD2S0:
00059a 81a8      	LD   R26,Y
00059b 81b9      	LDD  R27,Y+1
00059c 818a      	LDD  R24,Y+2
00059d 819b      	LDD  R25,Y+3
00059e 9508      	RET
                 
                 __PUTD1S0:
00059f 83e8      	ST   Y,R30
0005a0 83f9      	STD  Y+1,R31
0005a1 836a      	STD  Y+2,R22
0005a2 837b      	STD  Y+3,R23
0005a3 9508      	RET
                 
                 __PUTDZ20:
0005a4 83a0      	ST   Z,R26
0005a5 83b1      	STD  Z+1,R27
0005a6 8382      	STD  Z+2,R24
0005a7 8393      	STD  Z+3,R25
0005a8 9508      	RET
                 
                 __PUTPARD1:
0005a9 937a      	ST   -Y,R23
0005aa 936a      	ST   -Y,R22
0005ab 93fa      	ST   -Y,R31
0005ac 93ea      	ST   -Y,R30
0005ad 9508      	RET
                 
                 __PUTPARD2:
0005ae 939a      	ST   -Y,R25
0005af 938a      	ST   -Y,R24
0005b0 93ba      	ST   -Y,R27
0005b1 93aa      	ST   -Y,R26
0005b2 9508      	RET
                 
                 __SWAPD12:
0005b3 2e18      	MOV  R1,R24
0005b4 2f86      	MOV  R24,R22
0005b5 2d61      	MOV  R22,R1
0005b6 2e19      	MOV  R1,R25
0005b7 2f97      	MOV  R25,R23
0005b8 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0005b9 2e1b      	MOV  R1,R27
0005ba 2fbf      	MOV  R27,R31
0005bb 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0005bc 2e1a      	MOV  R1,R26
0005bd 2fae      	MOV  R26,R30
0005be 2de1      	MOV  R30,R1
0005bf 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  29 r1 :  30 r2 :   0 r3 :   0 r4 :   4 r5 :   6 r6 :   4 r7 :   1 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:  55 r18:  12 r19:  12 r20:  22 r21:  63 r22:  77 r23:  71 
r24:  61 r25:  53 r26: 119 r27:  61 r28:   7 r29:   1 r30: 194 r31:  73 
x  :  19 y  : 130 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   9 and   :   5 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  40 brpl  :   8 brsh  :   1 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 call  : 102 
cbi   :  15 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  32 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :  11 cpc   :  12 cpi   :  36 cpse  :   0 dec   :  13 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  24 ld    :  28 ldd   :  55 ldi   : 162 
lds   :  12 lpm   :   8 lsl   :  14 lsr   :   3 mov   :  58 movw  :  22 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :  11 pop   :  22 push  :  22 rcall :  51 ret   :  56 
reti  :   0 rjmp  :  77 rol   :  26 ror   :  15 sbc   :   7 sbci  :  10 
sbi   :   9 sbic  :   4 sbis  :  12 sbiw  :  12 sbr   :   2 sbrc  :   1 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  48 std   :  23 sts   :  10 sub   :   4 subi  :  16 swap  :   1 
tst   :  19 wdr   :   1 
Instructions used: 79 out of 116 (68.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b80   2872     72   2944   32768   9.0%
[.dseg] 0x000060 0x000290      0     48     48    2048   2.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
